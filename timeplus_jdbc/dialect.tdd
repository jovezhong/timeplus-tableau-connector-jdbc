<?xml version='1.0' encoding='utf-8' ?>
<dialect name='Timeplus'
         class='timeplus_jdbc'
         base='PostgreSQL90Dialect'
         version='18.1'>
    <function-map>
    <function group='numeric' name='ABS' return-type='real'>
      <formula>abs(%1)</formula>
      <argument type='real' />
    </function>
    <function group='numeric' name='ABS' return-type='int'>
      <formula>abs(%1)</formula>
      <argument type='int' />
    </function>
    <function group='numeric' name='ACOS' return-type='real'>
      <formula>acos(%1)</formula>
      <argument type='real' />
    </function>
    <function group='numeric' name='ASIN' return-type='real'>
      <formula>asin(%1)</formula>
      <argument type='real' />
    </function>
    <function group='numeric' name='ATAN' return-type='real'>
      <formula>atan(%1)</formula>
      <argument type='real' />
    </function>
    <function group='numeric' name='ATAN2' return-type='real'>
      <formula>atan2(%1,%2)</formula>
      <argument type='real' />
      <argument type='real' />
    </function>
    <function group='numeric' name='CEILING' return-type='real'>
      <formula>ceiling(%1)</formula>
      <argument type='real' />
    </function>
    <function group='numeric' name='CEILING' return-type='int'>
      <formula>ceiling(%1)</formula>
      <argument type='real' />
    </function>
    <function group='numeric' name='CEILING' return-type='int'>
      <formula>ceiling(%1)</formula>
      <argument type='int' />
    </function>
    <function group='numeric' name='COS' return-type='real'>
      <formula>cos(%1)</formula>
      <argument type='real' />
    </function>
    <function group='numeric' name='COT' return-type='real'>
      <formula>case when tan(%1) = 0 then null else 1/tan(%1) end</formula>
      <argument type='real' />
    </function>
    <function group='numeric' name='DEGREES' return-type='real'>
      <formula>(%1 * 180 / pi())</formula>
      <argument type='real' />
    </function>
    <function group='numeric' name='DIV' return-type='int'>
      <formula>int_div_or_zero(%1, null_if(%2,0))</formula>
      <argument type='int' />
      <argument type='int' />
    </function>
    <function group='numeric' name='EXP' return-type='real'>
      <formula>exp(%1)</formula>
      <argument type='real' />
    </function>
    <function group='numeric' name='FLOOR' return-type='real'>
      <formula>floor(%1)</formula>
      <argument type='real' />
    </function>
    <function group='numeric' name='FLOOR' return-type='int'>
      <formula>floor(%1)</formula>
      <argument type='real' />
    </function>
    <function group='numeric' name='FLOOR' return-type='int'>
      <formula>floor(%1)</formula>
      <argument type='int' />
    </function>
    <function group='numeric' name='HEXBINX' return-type='real'>
      <formula>(((case when (abs((%2) - (cast( ( (%2) / sqrt(3.0) ) as numeric(18, 0) ) * sqrt(3.0)))) + sqrt(3.0) * ((abs((%1) - (cast( ( (%1) / 3.0 ) as numeric(18, 0) ) * 3.0))) - 1.0) &gt; 0.0 then 1.5 else 0.0 end) - (case when ((%1) - (cast( ( (%1) / 3.0 ) as numeric(18, 0) ) * 3.0) &lt; 0.0) and ((case when (abs((%2) - (cast( ( (%2) / sqrt(3.0) ) as numeric(18, 0) ) * sqrt(3.0)))) + sqrt(3.0) * ((abs((%1) - (cast( ( (%1) / 3.0 ) as numeric(18, 0) ) * 3.0))) - 1.0) &gt; 0.0 then 1.5 else 0.0 end) &gt; 0.0) then 3.0 else 0.0 end)) + (cast( ( (%1) / 3.0 ) as numeric(18, 0) ) * 3.0))</formula>
      <argument type='real' />
      <argument type='real' />
    </function>
    <function group='numeric' name='HEXBINY' return-type='real'>
      <formula>round( (((case when (abs((%2) - (round( ( (%2) / sqrt(3.0) ), 0 ) * sqrt(3.0)))) + sqrt(3.0) * ((abs((%1) - (round( ( (%1) / 3.0 ), 0 ) * 3.0))) - 1.0) &gt; 0.0 then sqrt(3.0) / 2.0 else 0.0 end) - (case when ((%2) - (round( ( (%2) / sqrt(3.0) ), 0 ) * sqrt(3.0)) &lt; 0.0) and ((case when (abs((%2) - (round( ( (%2) / sqrt(3.0) ), 0 ) * sqrt(3.0)))) + sqrt(3.0) * ((abs((%1) - (round( ( (%1) / 3.0 ), 0 ) * 3.0))) - 1.0) &gt; 0.0 then sqrt(3.0) / 2.0 else 0.0 end) &gt; 0.0) then sqrt(3.0) else 0.0 end)) + (round( ( (%2) / sqrt(3.0) ), 0 ) * sqrt(3.0))), 3)</formula>
      <argument type='real' />
      <argument type='real' />
    </function>
    <function group='numeric' name='LN' return-type='real'>
      <formula>if(%1 &gt; 0, ln(%1), null)</formula>
      <argument type='real' />
    </function>
    <function group='numeric' name='LOG' return-type='real'>
      <formula>if(%1 &gt; 0, log10(%1), null)</formula>
      <argument type='real' />
    </function>
    <function group='numeric' name='LOG' return-type='real'>
      <formula>if(%1 &gt; 0 and %2 &gt; 0, ln(%1) / ln(%2), null)</formula>
      <argument type='real' />
      <argument type='real' />
    </function>
    <function group='numeric' name='LOG2' return-type='real'>
      <formula>if(%1 &gt; 0, log2(%1), null)</formula>
      <argument type='real' />
    </function>
    <function group='numeric' name='MAX' return-type='real'>
      <formula>greatest(%1, %2)</formula>
      <argument type='real' />
      <argument type='real' />
    </function>
    <function group='numeric' name='MAX' return-type='int'>
      <formula>greatest(%1, %2)</formula>
      <argument type='int' />
      <argument type='int' />
    </function>
    <function group='numeric' name='MIN' return-type='real'>
      <formula>least(%1,%2)</formula>
      <argument type='real' />
      <argument type='real' />
    </function>
    <function group='numeric' name='MIN' return-type='int'>
      <formula>least(%1,%2)</formula>
      <argument type='int' />
      <argument type='int' />
    </function>
    <function group='numeric' name='MOD' return-type='int'>
      <formula>mod(%1,%2)</formula>
      <argument type='int' />
      <argument type='int' />
    </function>
    <function group='numeric' name='PI' return-type='real'>
      <formula>pi()</formula>
    </function>
    <function group='numeric' name='POWER' return-type='real'>
      <formula>power(%1,%2)</formula>
      <argument type='real' />
      <argument type='real' />
    </function>
    <function group='numeric' name='POWER' return-type='real'>
      <formula>power(%1,%2)</formula>
      <argument type='real' />
      <argument type='int' />
    </function>
    <function group='numeric' name='POWER' return-type='real'>
      <formula>power(%1,%2)</formula>
      <argument type='int' />
      <argument type='int' />
    </function>
    <function group='numeric' name='RADIANS' return-type='real'>
      <formula>(%1 * atan(1) / 45)</formula>
      <argument type='real' />
    </function>
    <function group='numeric' name='RAND' return-type='int'>
      <formula>rand()</formula>
    </function>
    <function group='numeric' name='RANDOM' return-type='real'>
      <formula>rand()/4294967295</formula>
    </function>
    <function group='numeric' name='RAND_CONSTANT' return-type='int'>
      <formula>rand_constant()</formula>
    </function>
    <function group='numeric' name='RAND_CONSTANT' return-type='int'>
      <formula>rand_constant(%1)</formula>
      <argument type='int' />
    </function>
    <function group='numeric' name='RAND_CONSTANT' return-type='int'>
      <formula>rand_constant(%1)</formula>
      <argument type='real' />
    </function>
    <function group='numeric' name='RAND_CONSTANT' return-type='int'>
      <formula>rand_constant(%1)</formula>
      <argument type='str' />
    </function>
    <function group='numeric' name='RAND_CONSTANT' return-type='int'>
      <formula>rand_constant(%1)</formula>
      <argument type='bool' />
    </function>
    <function group='numeric' name='RAND_CONSTANT' return-type='int'>
      <formula>rand_constant(%1)</formula>
      <argument type='date' />
    </function>
    <function group='numeric' name='RAND_CONSTANT' return-type='int'>
      <formula>rand_constant(%1)</formula>
      <argument type='datetime' />
    </function>
    <function group='numeric' name='ROUND' return-type='real'>
      <formula>round(%1, 0)</formula>
      <argument type='real' />
    </function>
    <function group='numeric' name='ROUND' return-type='real'>
      <formula>round(%1, %2)</formula>
      <argument type='real' />
      <argument type='int' />
    </function>
    <function group='numeric' name='ROUND' return-type='real'>
      <formula>round(cast(%1 as nullable(double)), cast(%2 as integer))</formula>
      <argument type='real' />
      <argument type='real' />
    </function>
    <function group='numeric' name='SIGN' return-type='int'>
      <formula>sign(%1)</formula>
      <argument type='real' />
    </function>
    <function group='numeric' name='SIN' return-type='real'>
      <formula>sin(%1)</formula>
      <argument type='real' />
    </function>
    <function group='numeric' name='SQRT' return-type='real'>
      <formula>if(%1 &gt;= 0, sqrt(%1), null)</formula>
      <argument type='real' />
    </function>
    <function group='numeric' name='SQUARE' return-type='real'>
      <formula>power(%1,2)</formula>
      <argument type='real' />
    </function>
    <function group='numeric' name='SQUARE' return-type='int'>
      <formula>power(%1, 2)</formula>
      <argument type='int' />
    </function>
    <function group='numeric' name='TAN' return-type='real'>
      <formula>tan(%1)</formula>
      <argument type='real' />
    </function>
    <function group='numeric' name='TRUNC' return-type='real'>
      <formula>trunc(%1)</formula>
      <argument type='real' />
    </function>
    <function group='numeric;logical' name='ZN' return-type='real'>
      <formula>if_null(%1, 0)</formula>
      <argument type='real' />
    </function>
    <function group='numeric;logical' name='ZN' return-type='int'>
      <formula>if_ ull(%1, 0)</formula>
      <argument type='int' />
    </function>
    <function group='string' name='ASCII' return-type='int'>
      <formula>reinterpret_as_uint8(substring(%1, 1, 1))</formula>
      <argument type='str' />
    </function>
    <function group='string' name='BAR' return-type='str'>
      <formula>bar(%1, %2, %3, %4)</formula>
      <argument type='int' />
      <argument type='int' />
      <argument type='int' />
      <argument type='int' />
    </function>
    <function group='string' name='CHAR' return-type='str'>
      <formula>char(%1)</formula>
      <argument type='real' />
    </function>
    <function group='string' name='CHAR' return-type='str'>
      <formula>char(%1)</formula>
      <argument type='int' />
    </function>
    <function group='string' name='CONTAINS' return-type='bool'>
      <formula>position(%1, %2) &gt; 0</formula>
      <argument type='str' />
      <argument type='str' />
    </function>
    <function group='string' name='DOMAIN' return-type='str'>
      <formula>domain(%1)</formula>
      <argument type='str' />
    </function>
    <function group='string' name='ENDSWITH' return-type='bool'>
      <formula>ends_with(trim_right(%1),%2)</formula>
      <argument type='str' />
      <argument type='str' />
    </function>
    <function group='string' name='FIND' return-type='int'>
      <formula>position(%1, %2)</formula>
      <argument type='str' />
      <argument type='str' />
    </function>
    <function group='string' name='FIND' return-type='int'>
      <formula>position(%1, %2, cast(%3 as nullable(uint8)))</formula>
      <argument type='str' />
      <argument type='str' />
      <argument type='real' />
    </function>
    <function group='string' name='FIND' return-type='int'>
      <formula>position(%1, %2, %3)</formula>
      <argument type='str' />
      <argument type='str' />
      <argument type='int' />
    </function>
    <function group='string' name='FINDNTH' return-type='int'>
      <formula>multi_if(count_substrings(%1, %2) &lt; cast(%3 as nullable(uint8)), 0, length(replace_regexp_all(to_string(array_resize(split_by_string(%2, %1), cast(%3 as nullable(uint8)))), '[\[\]\'\,]' , '')) + length(%2) * (cast(%3 as nullable(uint8)) - 1) + 1)</formula>
      <argument type='str' />
      <argument type='str' />
      <argument type='real' />
    </function>
    <function group='string' name='FINDNTH' return-type='int'>
      <formula>multi_if(count_substrings(%1, %2) &lt; %3, 0, length(replace_regexp_all(to_string(array_resize(split_by_string(%2, %1), %3)), '[\[\]\'\,]' , '')) + length(%2) * (%3 - 1) + 1)</formula>
      <argument type='str' />
      <argument type='str' />
      <argument type='int' />
    </function>
    <function group='string' name='FORMAT_READABLE_TIMEDELTA' return-type='str'>
      <formula>format_readable_time_delta(%1)</formula>
      <argument type='int' />
    </function>
    <function group='string' name='FORMAT_READABLE_TIMEDELTA' return-type='str'>
      <formula>format_readable_time_delta(%1, %2)</formula>
      <argument type='int' />
      <argument type='str' />
    </function>
    <function group='string' name='FORMAT_READABLE_QUANTITY' return-type='str'>
      <formula>format_readable_quantity(%1)</formula>
      <argument type='int' />
    </function>
    <function group='string' name='GET_JSON_OBJECT' return-type='str'>
      <formula>json_extract_raw(%1,%2)</formula>
      <argument type='str' />
      <argument type='str' />
    </function>
    <function group='string' name='GET_SETTING' return-type='str'>
      <formula>get_setting(%1)</formula>
      <argument type='str' />
    </function>
    <function group='string' name='HEX' return-type='str'>
      <formula>hex(%1)</formula>
      <argument type='str' />
    </function>
    <function group='string' name='HOST' return-type='str'>
      <formula>netloc(%1)</formula>
      <argument type='str' />
    </function>
    <function group='string' name='LEFT' return-type='str'>
      <formula>case when isnull(%2) or %2 &lt; 1 then null&#10; else substring(%1,1,cast(trunc(%2) as nullable(integer))) end</formula>
      <argument type='str' />
      <argument type='real' />
    </function>
    <function group='string' name='LEFT' return-type='str'>
      <formula>case when isnull(%2) or %2 &lt; 1 then null&#10; else substring(%1,1,%2) end</formula>
      <argument type='str' />
      <argument type='int' />
    </function>
    <function group='string' name='LEN' return-type='int'>
      <formula>char_length(%1)</formula>
      <argument type='str' />
    </function>
    <function group='string' name='LOWER' return-type='str'>
      <formula>lower(%1)</formula>
      <argument type='str' />
    </function>
    <function group='string' name='LTRIM' return-type='str'>
      <formula>ltrim(%1)</formula>
      <argument type='str' />
    </function>
    <function group='string' name='MAX' return-type='str'>
      <formula>greatest(%1, %2)</formula>
      <argument type='str' />
      <argument type='str' />
    </function>
    <function group='string' name='MID' return-type='str'>
      <formula>mid(%1,if(%2 &lt; 1,1,%2))</formula>
      <argument type='str' />
      <argument type='real' />
    </function>
    <function group='string' name='MID' return-type='str'>
      <formula>mid(%1,%2)</formula>
      <argument type='str' />
      <argument type='int' />
    </function>
    <function group='string' name='MID' return-type='str'>
      <formula>mid(%1,if(%2 &lt; 1,1,%2),%3)</formula>
      <argument type='str' />
      <argument type='real' />
      <argument type='real' />
    </function>
    <function group='string' name='MID' return-type='str'>
      <formula>mid(%1,if(%2 &lt; 1,1,%2),%3)</formula>
      <argument type='str' />
      <argument type='int' />
      <argument type='int' />
    </function>
    <function group='string' name='MIN' return-type='str'>
      <formula>least(%1,%2)</formula>
      <argument type='str' />
      <argument type='str' />
    </function>
    <function group='string' name='PARSE_URL_QUERY' return-type='str'>
      <formula>extract_url_parameter(%1,%2)</formula>
      <argument type='str' />
      <argument type='str' />
    </function>
    <function group='string' name='PROPER' return-type='str'>
      <formula>array_string_concat(array_map(x -> concat(x.1, x.2, x.3, x.4), flatten(array_concat(array_zip(extract_all_groups_horizontal(%1, '([^\p{l}\d]*)([\p{l}\d]{1})([\p{l}\d]*)([^\p{l}\d]*)')[1], array_map(x -> upper_utf8(x), extract_all_groups_horizontal(%1, '([^\p{l}\d]*)([\p{l}\d]{1})([\p{l}\d]*)([^\p{l}\d]*)')[2]), array_map(x -> lower_utf8(x), extract_all_groups_horizontal(%1, '([^\p{l}\d]*)([\p{l}\d]{1})([\p{l}\d]*)([^\p{l}\d]*)')[3]), extract_all_groups_horizontal(%1, '([^\p{l}\d]*)([\p{l}\d]{1})([\p{l}\d]*)([^\p{l}\d]*)')[4])))))</formula>
      <argument type='str' />
    </function>
    <function group='string' name='REGEXP_EXTRACT' return-type='str'>
      <formula>replace_regexp_all(to_string(extract(%1,%2)), '[\[\]\']' , '')</formula>
      <argument type='str' />
      <argument type='str' />
    </function>
    <function group='string' name='REGEXP_EXTRACT_NTH' return-type='str'>
      <formula>to_string(array_element(array_flatten(extract_all_groups_vertical(%1,%2)),%3))</formula>
      <argument type='str' />
      <argument type='str' />
      <argument type='localint' />
    </function>
    <function group='string' name='REGEXP_MATCH' return-type='bool'>
      <formula>match(%1, %2)</formula>
      <argument type='str' />
      <argument type='str' />
    </function>
    <function group='string' name='REGEXP_REPLACE' return-type='str'>
      <formula>replace_regexp_all(%1, %2, %3)</formula>
      <argument type='str' />
      <argument type='str' />
      <argument type='str' />
    </function>
    <function group='string' name='REPLACE' return-type='str'>
      <formula>replace(%1,%2,%3)</formula>
      <argument type='str' />
      <argument type='str' />
      <argument type='str' />
    </function>
    <function group='string' name='RIGHT' return-type='str'>
      <formula>case when isnull(%2) or cast(trunc(%2) as nullable(integer)) &lt; 1 then null&#10; else substring(%1,-cast(trunc(%2) as nullable(integer))) end</formula>
      <argument type='str' />
      <argument type='real' />
    </function>
    <function group='string' name='RIGHT' return-type='str'>
      <formula>case when isnull(%2) or %2 &lt; 1 then null&#10; else substring(%1,-%2) end</formula>
      <argument type='str' />
      <argument type='int' />
    </function>
    <function group='string' name='RTRIM' return-type='str'>
      <formula>rtrim(%1)</formula>
      <argument type='str' />
    </function>
    <function group='string' name='SHA256' return-type='str'>
      <formula>sha256(%1)</formula>
      <argument type='str' />
    </function>
    <function group='string' name='SPACE' return-type='str'>
      <formula>multi_if(is_null(%1) or (%1 &lt; 0), null, %1 == 0, '', repeat(' ', to_uint8(%1)))</formula>
      <argument type='real' />
    </function>
    <function group='string' name='SPACE' return-type='str'>
      <formula>multi_if(is_null(%1) or (%1 &lt; 0), null, %1 == 0, '', repeat(' ', to_uint8(%1)))</formula>
      <argument type='int' />
    </function>
    <function group='string' name='SPLIT' return-type='str'>
      <formula>to_string(array_element(split_by_string(&apos;%2&apos;,if_null(%1,'')),%3))
      </formula>
      <argument type='str' />
      <argument type='localstr' />
      <argument type='localint' />
    </function>
    <function group='string' name='STARTSWITH' return-type='bool'>
      <formula>starts_with(trim_left(%1),%2)</formula>
      <argument type='str' />
      <argument type='str' />
    </function>
    <function group='string' name='TLD' return-type='str'>
      <formula>top_level_domain(%1)</formula>
      <argument type='str' />
    </function>
    <function group='string' name='TRIM' return-type='str'>
      <formula>trim(%1)</formula>
      <argument type='str' />
    </function>
    <function group='string' name='UNHEX' return-type='str'>
      <formula>unhex(%1)</formula>
      <argument type='str' />
    </function>
    <function group='string' name='UPPER' return-type='str'>
      <formula>upper(%1)</formula>
      <argument type='str' />
    </function>
    <function group='cast' name='DATE' return-type='date'>
      <formula>to_date(%1 - 25567)</formula>
      <argument type='real' />
    </function>
    <function group='cast' name='DATE' return-type='date'>
      <formula>to_date(%1 - 25567)</formula>
      <argument type='int' />
    </function>
    <function group='cast' name='DATE' return-type='date'>
      <formula>to_date(parse_date_time_best_effort_or_null(%1))</formula>
      <argument type='str' />
    </function>
    <function group='cast' name='DATE' return-type='date'>
      <formula>cast(%1 as nullable(date))</formula>
      <argument type='datetime' />
    </function>
    <function group='cast' name='DATE' return-type='date'>
      <formula>cast(%1 as nullable(date))</formula>
      <argument type='date' />
    </function>
    <function group='cast' name='DATETIME' return-type='datetime'>
      <formula>to_date_time((%1 - 25567) * 86400.0)</formula>
      <argument type='real' />
    </function>
    <function group='cast' name='DATETIME' return-type='datetime'>
      <formula>to_date_time((%1 - 25567) * 86400.0)</formula>
      <argument type='int' />
    </function>
    <function group='cast' name='DATETIME' return-type='datetime'>
      <formula>parse_date_time_best_effort_or_null(%1)</formula>
      <argument type='str' />
    </function>
    <function group='cast' name='DATETIME' return-type='datetime'>
      <formula>cast(%1 as nullable(timestamp))</formula>
      <argument type='datetime' />
    </function>
    <function group='cast' name='DATETIME' return-type='datetime'>
      <formula>cast(%1 as nullable(timestamp))</formula>
      <argument type='date' />
    </function>
    <function group='cast' name='FLOAT' return-type='real'>
      <formula>cast(%1 as nullable(float64))</formula>
      <argument type='bool' />
    </function>
    <function group='cast' name='FLOAT' return-type='real'>
      <formula>cast(%1 as nullable(double))</formula>
      <argument type='real' />
    </function>
    <function group='cast' name='FLOAT' return-type='real'>
      <formula>cast(%1 as nullable(double))</formula>
      <argument type='int' />
    </function>
    <function group='cast' name='FLOAT' return-type='real'>
      <formula>cast(%1 as nullable(double))</formula>
      <argument type='str' />
    </function>
    <function group='cast' name='FLOAT' return-type='real'>
      <formula>(to_unix_timestamp(%1) / 86400.0 + 25567.0)</formula>
      <argument type='datetime' />
    </function>
    <function group='cast' name='FLOAT' return-type='real'>
      <formula>(to_unix_timestamp(to_date_time(%1)) / 86400.0 + 25567.0)</formula>
      <argument type='date' />
    </function>
    <function group='cast' name='INT' return-type='int'>
      <formula>cast(%1 as nullable(uint8))</formula>
      <argument type='bool' />
    </function>
    <function group='cast' name='INT' return-type='int'>
      <formula>cast(trunc(%1) as nullable(integer))</formula>
      <argument type='real' />
    </function>
    <function group='cast' name='INT' return-type='int'>
      <formula>cast(%1 as nullable(integer))</formula>
      <argument type='int' />
    </function>
    <function group='cast' name='INT' return-type='int'>
      <formula>cast(cast(%1 as nullable(float)) as nullable(integer))</formula>
      <argument type='str' />
    </function>
    <function group='cast' name='INT' return-type='int'>
      <formula>cast(cast(%1 as nullable(date)) as nullable(integer)) + 25567</formula>
      <argument type='datetime' />
    </function>
    <function group='cast' name='INT' return-type='int'>
      <formula>cast(%1 as nullable(integer)) + 25567</formula>
      <argument type='date' />
    </function>
    <function group='cast' name='MAKEDATE' return-type='date'>
      <formula>add_days(add_months(add_years(date '1970-01-01', cast(%1 as nullable(integer)) -1970), cast(%2 as nullable(integer)) -1), cast(%3 as nullable(integer)) -1)</formula>
      <argument type='int' />
      <argument type='int' />
      <argument type='int' />
    </function>
    <function group='cast' name='MAKEDATETIME' return-type='datetime'>
      <formula>date_add(second, date_diff('second', date_trunc('day', cast(%2 as nullable(datetime))), cast(%2 as nullable(datetime))), cast(%1 as nullable(date)))</formula>
      <argument type='str' />
      <argument type='datetime' />
    </function>
    <function group='cast' name='MAKEDATETIME' return-type='datetime'>
      <formula>date_add(second, date_diff('second', date_trunc('day', cast(%2 as nullable(datetime))), cast(%2 as nullable(datetime))), cast(%1 as nullable(date)))</formula>
      <argument type='datetime' />
      <argument type='datetime' />
    </function>
    <function group='cast' name='MAKEDATETIME' return-type='datetime'>
      <formula>date_add(second, date_diff('second', date_trunc('day', cast(%2 as nullable(datetime))), cast(%2 as nullable(datetime))), cast(%1 as nullable(date)))</formula>
      <argument type='date' />
      <argument type='datetime' />
    </function>
    <function group='cast' name='MAKETIME' return-type='datetime'>
      <formula>to_time(add_seconds(add_minutes(add_hours(date '1970-01-02', cast(%1 as nullable(integer))), cast(%2 as nullable(integer))), cast(%3 as nullable(integer))))</formula>
      <argument type='int' />
      <argument type='int' />
      <argument type='int' />
    </function>
    <function group='cast' name='REAL' return-type='real'>
      <formula>to_float64(%1)</formula>
      <argument type='int' />
    </function>
    <function group='cast' name='STR' return-type='str'>
      <formula>to_string(%1 &gt; 0)</formula>
      <argument type='bool' />
    </function>
    <function group='cast' name='STR' return-type='str'>
      <formula>cast(to_string(%1) as nullable(string))</formula>
      <argument type='real' />
    </function>
    <function group='cast' name='STR' return-type='str'>
      <formula>cast(to_string(%1) as nullable(string))</formula>
      <argument type='int' />
    </function>
    <function group='cast' name='STR' return-type='str'>
      <formula>cast(%1 as nullable(string))</formula>
      <argument type='str' />
    </function>
    <function group='cast' name='STR' return-type='str'>
      <formula>cast(to_string(%1) as nullable(string))</formula>
      <argument type='datetime' />
    </function>
    <function group='cast' name='STR' return-type='str'>
      <formula>cast(to_string(%1) as nullable(string))</formula>
      <argument type='date' />
    </function>
    <function group='logical' name='IFNULL' return-type='bool'>
      <formula>if_null(%1, %2)</formula>
      <argument type='bool' />
      <argument type='bool' />
    </function>
    <function group='logical' name='IFNULL' return-type='real'>
      <formula>if_null(%1, %2)</formula>
      <argument type='real' />
      <argument type='real' />
    </function>
    <function group='logical' name='IFNULL' return-type='int'>
      <formula>if_null(%1, %2)</formula>
      <argument type='int' />
      <argument type='int' />
    </function>
    <function group='logical' name='IFNULL' return-type='str'>
      <formula>if_null(%1, %2)</formula>
      <argument type='str' />
      <argument type='str' />
    </function>
    <function group='logical' name='IFNULL' return-type='datetime'>
      <formula>if_null(%1, %2)</formula>
      <argument type='datetime' />
      <argument type='datetime' />
    </function>
    <function group='logical' name='IFNULL' return-type='datetime'>
      <formula>if_null(%1, to_date_time(%2))</formula>
      <argument type='datetime' />
      <argument type='date' />
    </function>
    <function group='logical' name='IFNULL' return-type='datetime'>
      <formula>if_null(to_date_time(%1), %2)</formula>
      <argument type='date' />
      <argument type='datetime' />
    </function>
    <function group='logical' name='IFNULL' return-type='date'>
      <formula>if_null(%1, %2)</formula>
      <argument type='date' />
      <argument type='date' />
    </function>
    <function group='logical' name='IFNULL' return-type='spatial'>
      <formula>if_null(%1, %2)</formula>
      <argument type='spatial' />
      <argument type='spatial' />
    </function>
    <function group='logical' name='IIF' return-type='bool'>
      <formula>((%1 and %2) or ((not %1) and %3))</formula>
      <argument type='bool' />
      <argument type='bool' />
      <argument type='bool' />
    </function>
    <function group='logical' name='IIF' return-type='real'>
      <formula>case when %1 then %2 when not %1 then %3 else null end</formula>
      <argument type='bool' />
      <argument type='real' />
      <argument type='real' />
    </function>
    <function group='logical' name='IIF' return-type='real'>
      <formula>case when %1 then %2 when not %1 then %3 else %4 end</formula>
      <argument type='bool' />
      <argument type='real' />
      <argument type='real' />
      <argument type='real' />
    </function>
    <function group='logical' name='IIF' return-type='int'>
      <formula>case when %1 then %2 when not %1 then %3 else null end</formula>
      <argument type='bool' />
      <argument type='int' />
      <argument type='int' />
    </function>
    <function group='logical' name='IIF' return-type='int'>
      <formula>case when %1 then %2 when not %1 then %3 else %4 end</formula>
      <argument type='bool' />
      <argument type='int' />
      <argument type='int' />
      <argument type='int' />
    </function>
    <function group='logical' name='IIF' return-type='str'>
      <formula>case when %1 then %2 when not %1 then %3 else null end</formula>
      <argument type='bool' />
      <argument type='str' />
      <argument type='str' />
    </function>
    <function group='logical' name='IIF' return-type='str'>
      <formula>case when %1 then %2 when not %1 then %3 else %4 end</formula>
      <argument type='bool' />
      <argument type='str' />
      <argument type='str' />
      <argument type='str' />
    </function>
    <function group='logical' name='IIF' return-type='datetime'>
      <formula>case when %1 then %2 when not %1 then %3 else null end</formula>
      <argument type='bool' />
      <argument type='datetime' />
      <argument type='datetime' />
    </function>
    <function group='logical' name='IIF' return-type='datetime'>
      <formula>case when %1 then %2 when not %1 then %3 else %4 end</formula>
      <argument type='bool' />
      <argument type='datetime' />
      <argument type='datetime' />
      <argument type='datetime' />
    </function>
    <function group='logical' name='IIF' return-type='date'>
      <formula>case when %1 then %2 when not %1 then %3 else null end</formula>
      <argument type='bool' />
      <argument type='date' />
      <argument type='date' />
    </function>
    <function group='logical' name='IIF' return-type='date'>
      <formula>case when %1 then %2 when not %1 then %3 else %4 end</formula>
      <argument type='bool' />
      <argument type='date' />
      <argument type='date' />
      <argument type='date' />
    </function>
    <function group='logical' name='IIF' return-type='spatial'>
      <formula>case when %1 then %2 when not %1 then %3 else null end</formula>
      <argument type='bool' />
      <argument type='spatial' />
      <argument type='spatial' />
    </function>
    <function group='logical' name='IIF' return-type='spatial'>
      <formula>case when %1 then %2 when not %1 then %3 else %4 end</formula>
      <argument type='bool' />
      <argument type='spatial' />
      <argument type='spatial' />
      <argument type='spatial' />
    </function>
    <function group='logical' name='ISNULL' return-type='bool'>
      <formula>is_null(%1)</formula>
      <argument type='bool' />
    </function>
    <function group='logical' name='ISNULL' return-type='bool'>
      <formula>is_null(%1)</formula>
      <argument type='real' />
    </function>
    <function group='logical' name='ISNULL' return-type='bool'>
      <formula>is_null(%1)</formula>
      <argument type='str' />
    </function>
    <function group='logical' name='ISNULL' return-type='bool'>
      <formula>is_null(%1)</formula>
      <argument type='datetime' />
    </function>
    <function group='logical' name='ISNULL' return-type='bool'>
      <formula>is_null(%1)</formula>
      <argument type='spatial' />
    </function>
    <function group='aggregate' name='AVG' return-type='real'>
      <formula>avg(%1)</formula>
      <unagg-formula>%1</unagg-formula>
      <argument type='real' />
    </function>
    <function group='aggregate' name='AVG' return-type='real'>
      <formula>avg(cast(%1 as nullable(	double)))</formula>
      <unagg-formula>%1</unagg-formula>
      <argument type='int' />
    </function>
    <function group='aggregate' name='AVG_IF' return-type='real'>
      <formula>avg_if(%1,%2)</formula>
      <unagg-formula>null</unagg-formula>
      <argument type='real' />
      <argument type='bool' />
    </function>
    <function group='aggregate' name='AVG_IF' return-type='real'>
      <formula>avg_if(cast(%1 as nullable( double)),%2)</formula>
      <unagg-formula>null</unagg-formula>
      <argument type='int' />
      <argument type='bool' />
    </function>
    <function group='aggregate' name='CORR' return-type='real'>
      <formula>corr(%1, %2)</formula>
      <unagg-formula>cast(null as nullable(double))</unagg-formula>
      <argument type='real' />
      <argument type='real' />
    </function>
    <function group='aggregate' name='COUNT' return-type='int'>
      <formula>count(%1)</formula>
      <unagg-formula>is_not_null(%1)</unagg-formula>
      <argument type='bool' />
    </function>
    <function group='aggregate' name='COUNT' return-type='int'>
      <formula>count(%1)</formula>
      <unagg-formula>is_not_null(%1)</unagg-formula>
      <argument type='real' />
    </function>
    <function group='aggregate' name='COUNT' return-type='int'>
      <formula>count(%1)</formula>
      <unagg-formula>is_not_null(%1)</unagg-formula>
      <argument type='int' />
    </function>
    <function group='aggregate' name='COUNT' return-type='int'>
      <formula>count(%1)</formula>
      <unagg-formula>is_not_null(%1)</unagg-formula>
      <argument type='str' />
    </function>
    <function group='aggregate' name='COUNT' return-type='int'>
      <formula>count(%1)</formula>
      <unagg-formula>is_not_null(%1)</unagg-formula>
      <argument type='datetime' />
    </function>
    <function group='aggregate' name='COUNT' return-type='int'>
      <formula>count(%1)</formula>
      <unagg-formula>is_not_null(%1)</unagg-formula>
      <argument type='date' />
    </function>
    <function group='aggregate' name='COUNT_IF' return-type='int'>
      <formula>count_if(%1,%2)</formula>
      <unagg-formula>null</unagg-formula>
      <argument type='bool' />
      <argument type='bool' />
    </function>
    <function group='aggregate' name='COUNT_IF' return-type='int'>
      <formula>count_if(%1,%2)</formula>
      <unagg-formula>null</unagg-formula>
      <argument type='real' />
      <argument type='bool' />
    </function>
    <function group='aggregate' name='COUNT_IF' return-type='int'>
      <formula>count_if(%1,%2)</formula>
      <unagg-formula>null</unagg-formula>
      <argument type='int' />
      <argument type='bool' />
    </function>
    <function group='aggregate' name='COUNT_IF' return-type='int'>
      <formula>count_if(%1,%2)</formula>
      <unagg-formula>null</unagg-formula>
      <argument type='str' />
      <argument type='bool' />
    </function>
    <function group='aggregate' name='COUNT_IF' return-type='int'>
      <formula>count_if(%1,%2)</formula>
      <unagg-formula>null</unagg-formula>
      <argument type='datetime' />
      <argument type='bool' />
    </function>
    <function group='aggregate' name='COUNT_IF' return-type='int'>
      <formula>count_if(%1,%2)</formula>
      <unagg-formula>null</unagg-formula>
      <argument type='date' />
      <argument type='bool' />
    </function>
    <function group='aggregate' name='COUNTD' return-type='int'>
      <formula>count(distinct %1)</formula>
      <unagg-formula>is_not_null(%1)</unagg-formula>
      <argument type='bool' />
    </function>
    <function group='aggregate' name='COUNTD' return-type='int'>
      <formula>count(distinct %1)</formula>
      <unagg-formula>is_not_null(%1)</unagg-formula>
      <argument type='real' />
    </function>
    <function group='aggregate' name='COUNTD' return-type='int'>
      <formula>count(distinct %1)</formula>
      <unagg-formula>is_not_null(%1)</unagg-formula>
      <argument type='int' />
    </function>
    <function group='aggregate' name='COUNTD' return-type='int'>
      <formula>count(distinct %1)</formula>
      <unagg-formula>is_not_null(%1)</unagg-formula>
      <argument type='str' />
    </function>
    <function group='aggregate' name='COUNTD' return-type='int'>
      <formula>count(distinct %1)</formula>
      <unagg-formula>is_not_null(%1)</unagg-formula>
      <argument type='datetime' />
    </function>
    <function group='aggregate' name='COUNTD' return-type='int'>
      <formula>count(distinct %1)</formula>
      <unagg-formula>is_not_null(%1)</unagg-formula>
      <argument type='date' />
    </function>
    <function group='aggregate' name='COUNTD_MERGE' return-type='int'>
      <formula>uniq_exact_merge(%1)</formula>
      <unagg-formula>is_not_null(%1)</unagg-formula>
      <argument type='str' />
    </function>
    <function group='aggregate' name='COUNTD_UNIQ' return-type='int'>
      <formula>uniq(%1)</formula>
      <unagg-formula>is_not_null(%1)</unagg-formula>
      <argument type='bool' />
    </function>
    <function group='aggregate' name='COUNTD_UNIQ' return-type='int'>
      <formula>uniq(%1)</formula>
      <unagg-formula>is_not_null(%1)</unagg-formula>
      <argument type='real' />
    </function>
    <function group='aggregate' name='COUNTD_UNIQ' return-type='int'>
      <formula>uniq(%1)</formula>
      <unagg-formula>is_not_null(%1)</unagg-formula>
      <argument type='int' />
    </function>
    <function group='aggregate' name='COUNTD_UNIQ' return-type='int'>
      <formula>uniq(%1)</formula>
      <unagg-formula>is_not_null(%1)</unagg-formula>
      <argument type='str' />
    </function>
    <function group='aggregate' name='COUNTD_UNIQ' return-type='int'>
      <formula>uniq(%1)</formula>
      <unagg-formula>is_not_null(%1)</unagg-formula>
      <argument type='datetime' />
    </function>
    <function group='aggregate' name='COUNTD_UNIQ' return-type='int'>
      <formula>uniq(%1)</formula>
      <unagg-formula>is_not_null(%1)</unagg-formula>
      <argument type='date' />
    </function>
    <function group='aggregate' name='COUNTD_UNIQ_MERGE' return-type='int'>
      <formula>uniq_merge(%1)</formula>
      <unagg-formula>is_not_null(%1)</unagg-formula>
      <argument type='str' />
    </function>
    <function group='aggregate' name='COVAR' return-type='real'>
      <formula>covar_samp(%1, %2)</formula>
      <unagg-formula>null</unagg-formula>
      <argument type='real' />
      <argument type='real' />
    </function>
    <function group='aggregate' name='COVARP' return-type='real'>
      <formula>covar_pop(%1, %2)</formula>
      <unagg-formula>null</unagg-formula>
      <argument type='real' />
      <argument type='real' />
    </function>
    <function group='aggregate' name='GROUP_CONCAT' return-type='str'>
      <formula>replace_regexp_all(to_string(array_sort(group_uniq_array(%1))), '[\[\]\']' , '')</formula>
      <unagg-formula>%1</unagg-formula>
      <argument type='str' />
    </function>
    <function group='aggregate' name='MAX' return-type='bool'>
      <formula>group_bit_or(%1)</formula>
      <unagg-formula>%1</unagg-formula>
      <argument type='bool' />
    </function>
    <function group='aggregate' name='MAX' return-type='real'>
      <formula>max(%1)</formula>
      <unagg-formula>%1</unagg-formula>
      <argument type='real' />
    </function>
    <function group='aggregate' name='MAX' return-type='int'>
      <formula>max(%1)</formula>
      <unagg-formula>%1</unagg-formula>
      <argument type='int' />
    </function>
    <function group='aggregate' name='MAX' return-type='str'>
      <formula>max(%1)</formula>
      <unagg-formula>%1</unagg-formula>
      <argument type='str' />
    </function>
    <function group='aggregate' name='MAX' return-type='datetime'>
      <formula>max(%1)</formula>
      <unagg-formula>%1</unagg-formula>
      <argument type='datetime' />
    </function>
    <function group='aggregate' name='MAX' return-type='date'>
      <formula>max(%1)</formula>
      <unagg-formula>%1</unagg-formula>
      <argument type='date' />
    </function>
    <function group='aggregate' name='MAX_IF' return-type='bool'>
      <formula>max_if(%1,%2)</formula>
      <unagg-formula>null</unagg-formula>
      <argument type='bool' />
      <argument type='bool' />
    </function>
    <function group='aggregate' name='MAX_IF' return-type='real'>
      <formula>max_if(%1,%2)</formula>
      <unagg-formula>null</unagg-formula>
      <argument type='real' />
      <argument type='bool' />
    </function>
    <function group='aggregate' name='MAX_IF' return-type='int'>
      <formula>max_if(%1,%2)</formula>
      <unagg-formula>null</unagg-formula>
      <argument type='int' />
      <argument type='bool' />
    </function>
    <function group='aggregate' name='MAX_IF' return-type='str'>
      <formula>max_if(%1,%2)</formula>
      <unagg-formula>null</unagg-formula>
      <argument type='str' />
      <argument type='bool' />
    </function>
    <function group='aggregate' name='MAX_IF' return-type='datetime'>
      <formula>max_if(%1,%2)</formula>
      <unagg-formula>null</unagg-formula>
      <argument type='datetime' />
      <argument type='bool' />
    </function>
    <function group='aggregate' name='MAX_IF' return-type='date'>
      <formula>max_if(%1,%2)</formula>
      <unagg-formula>null</unagg-formula>
      <argument type='date' />
      <argument type='bool' />
    </function>
    <function group='aggregate' name='MEDIAN' return-type='real'>
      <formula>quantile(0.5)(%1)</formula>
      <unagg-formula>%1</unagg-formula>
      <argument type='real' />
    </function>
    <function group='aggregate' name='MEDIAN' return-type='int'>
      <formula>quantile(0.5)(%1)</formula>
      <unagg-formula>%1</unagg-formula>
      <argument type='int' />
    </function>
    <function group='aggregate' name='MEDIAN_EXACT' return-type='real'>
      <formula>quantile_exact(0.5)(%1)</formula>
      <unagg-formula>%1</unagg-formula>
      <argument type='real' />
    </function>
    <function group='aggregate' name='MEDIAN_EXACT' return-type='int'>
      <formula>quantile_exact(0.5)(%1)</formula>
      <unagg-formula>%1</unagg-formula>
      <argument type='int' />
    </function>
    <function group='aggregate' name='MIN' return-type='bool'>
      <formula>group_bit_and(%1)</formula>
      <unagg-formula>%1</unagg-formula>
      <argument type='bool' />
    </function>
    <function group='aggregate' name='MIN' return-type='real'>
      <formula>min(%1)</formula>
      <unagg-formula>%1</unagg-formula>
      <argument type='real' />
    </function>
    <function group='aggregate' name='MIN' return-type='int'>
      <formula>min(%1)</formula>
      <unagg-formula>%1</unagg-formula>
      <argument type='int' />
    </function>
    <function group='aggregate' name='MIN' return-type='str'>
      <formula>min(%1)</formula>
      <unagg-formula>%1</unagg-formula>
      <argument type='str' />
    </function>
    <function group='aggregate' name='MIN' return-type='datetime'>
      <formula>min(%1)</formula>
      <unagg-formula>%1</unagg-formula>
      <argument type='datetime' />
    </function>
    <function group='aggregate' name='MIN' return-type='date'>
      <formula>min(%1)</formula>
      <unagg-formula>%1</unagg-formula>
      <argument type='date' />
    </function>
    <function group='aggregate' name='MIN_IF' return-type='bool'>
      <formula>min_if(%1,%2)</formula>
      <unagg-formula>null</unagg-formula>
      <argument type='bool' />
      <argument type='bool' />
    </function>
    <function group='aggregate' name='MIN_IF' return-type='real'>
      <formula>min_if(%1,%2)</formula>
      <unagg-formula>null</unagg-formula>
      <argument type='real' />
      <argument type='bool' />
    </function>
    <function group='aggregate' name='MIN_IF' return-type='int'>
      <formula>min_if(%1,%2)</formula>
      <unagg-formula>null</unagg-formula>
      <argument type='int' />
      <argument type='bool' />
    </function>
    <function group='aggregate' name='MIN_IF' return-type='str'>
      <formula>min_if(%1,%2)</formula>
      <unagg-formula>null</unagg-formula>
      <argument type='str' />
      <argument type='bool' />
    </function>
    <function group='aggregate' name='MIN_IF' return-type='datetime'>
      <formula>min_if(%1,%2)</formula>
      <unagg-formula>null</unagg-formula>
      <argument type='datetime' />
      <argument type='bool' />
    </function>
    <function group='aggregate' name='MIN_IF' return-type='date'>
      <formula>min_if(%1,%2)</formula>
      <unagg-formula>null</unagg-formula>
      <argument type='date' />
      <argument type='bool' />
    </function>
    <function group='aggregate' name='KURTOSIS' return-type='real'>
      <formula>kurt_samp(%1)</formula>
      <unagg-formula>%1</unagg-formula>
      <argument type='real' />
    </function>
    <function group='aggregate' name='KURTOSIS' return-type='real'>
      <formula>kurt_samp(%1)</formula>
      <unagg-formula>%1</unagg-formula>
      <argument type='int' />
    </function>
    <function group='aggregate' name='KURTOSISP' return-type='real'>
      <formula>kurt_pop(%1)</formula>
      <unagg-formula>%1</unagg-formula>
      <argument type='real' />
    </function>
    <function group='aggregate' name='KURTOSISP' return-type='real'>
      <formula>kurt_pop(%1)</formula>
      <unagg-formula>%1</unagg-formula>
      <argument type='int' />
    </function>
    <function group='aggregate' name='PERCENTILE' return-type='real'>
      <formula>quantile(%2)(%1)</formula>
      <unagg-formula>%1</unagg-formula>
      <argument type='real' />
      <argument type='localreal' />
    </function>
    <function group='aggregate' name='PERCENTILE' return-type='real'>
      <formula>quantile(%2)(%1)</formula>
      <unagg-formula>%1</unagg-formula>
      <argument type='int' />
      <argument type='localreal' />
    </function>
    <function group='aggregate' name='PERCENTILE_EXACT' return-type='real'>
      <formula>quantile_exact(%2)(%1)</formula>
      <unagg-formula>%1</unagg-formula>
      <argument type='real' />
      <argument type='localreal' />
    </function>
    <function group='aggregate' name='PERCENTILE_EXACT' return-type='real'>
      <formula>quantile_exact(%2)(%1)</formula>
      <unagg-formula>%1</unagg-formula>
      <argument type='int' />
      <argument type='localreal' />
    </function>
   <function group='aggregate' name='SKEWNESS' return-type='real'>
      <formula>skew_samp(%1)</formula>
      <unagg-formula>%1</unagg-formula>
      <argument type='real' />
    </function>
    <function group='aggregate' name='SKEWNESS' return-type='real'>
      <formula>skew_samp(%1)</formula>
      <unagg-formula>%1</unagg-formula>
      <argument type='int' />
    </function>
    <function group='aggregate' name='SKEWNESSP' return-type='real'>
      <formula>skew_pop(%1)</formula>
      <unagg-formula>%1</unagg-formula>
      <argument type='real' />
    </function>
    <function group='aggregate' name='SKEWNESSP' return-type='real'>
      <formula>skew_pop(%1)</formula>
      <unagg-formula>%1</unagg-formula>
      <argument type='int' />
    </function>
    <function group='aggregate' name='STDEV' return-type='real'>
      <formula>stddev_samp(%1)</formula>
      <unagg-formula>%1</unagg-formula>
      <argument type='real' />
    </function>
    <function group='aggregate' name='STDEVP' return-type='real'>
      <formula>stddev_pop(%1)</formula>
      <unagg-formula>(%1 * 0.0)</unagg-formula>
      <argument type='real' />
    </function>
    <function group='aggregate' name='SUM' return-type='real'>
      <formula>sum(%1)</formula>
      <unagg-formula>%1</unagg-formula>
      <argument type='real' />
    </function>
    <function group='aggregate' name='SUM' return-type='int'>
      <formula>sum(%1)</formula>
      <unagg-formula>%1</unagg-formula>
      <argument type='int' />
    </function>
    <function group='aggregate' name='SUM_IF' return-type='real'>
      <formula>sum_if(%1,%2)</formula>
      <unagg-formula>null</unagg-formula>
      <argument type='real' />
      <argument type='bool' />
    </function>
    <function group='aggregate' name='SUM_IF' return-type='int'>
      <formula>sum_if(%1,%2)</formula>
      <unagg-formula>null</unagg-formula>
      <argument type='int' />
      <argument type='bool' />
    </function>
    <function group='aggregate' name='TO_TYPE_NAME' return-type='str'>
      <formula>to_type_name(any(%1))</formula>
      <unagg-formula>%1</unagg-formula>
      <argument type='str' />
    </function>
    <function group='aggregate' name='TO_TYPE_NAME' return-type='str'>
      <formula>to_type_name(any(%1))</formula>
      <unagg-formula>%1</unagg-formula>
      <argument type='int' />
    </function>
    <function group='aggregate' name='TO_TYPE_NAME' return-type='str'>
      <formula>to_type_name(any(%1))</formula>
      <unagg-formula>%1</unagg-formula>
      <argument type='real' />
    </function>
    <function group='aggregate' name='TO_TYPE_NAME' return-type='str'>
      <formula>to_type_name(any(%1))</formula>
      <unagg-formula>%1</unagg-formula>
      <argument type='bool' />
    </function>
    <function group='aggregate' name='TO_TYPE_NAME' return-type='str'>
      <formula>to_type_name(any(%1))</formula>
      <unagg-formula>%1</unagg-formula>
      <argument type='date' />
    </function>
    <function group='aggregate' name='TO_TYPE_NAME' return-type='str'>
      <formula>to_type_name(any(%1))</formula>
      <unagg-formula>%1</unagg-formula>
      <argument type='datetime' />
    </function>
    <function group='aggregate' name='VAR' return-type='real'>
      <formula>var_samp(%1)</formula>
      <unagg-formula>%1</unagg-formula>
      <argument type='real' />
    </function>
    <function group='aggregate' name='VARP' return-type='real'>
      <formula>var_pop(%1)</formula>
      <unagg-formula>(%1 * 0.0)</unagg-formula>
      <argument type='real' />
    </function>
    <function group='operator' name='!' return-type='bool'>
      <formula>(not %1)</formula>
      <argument type='bool' />
    </function>
    <function group='operator' name='!=' return-type='bool'>
      <formula>xor(%1,%2)</formula>
      <argument type='bool' />
      <argument type='bool' />
    </function>
    <function group='operator' name='!=' return-type='bool'>
      <formula>xor(%1,%2)</formula>
      <argument type='bool' />
      <argument type='int' />
    </function>
    <function group='operator' name='!=' return-type='bool'>
      <formula>(%1 &lt;&gt; %2)</formula>
      <argument type='real' />
      <argument type='real' />
    </function>
    <function group='operator' name='!=' return-type='bool'>
      <formula>xor(%1,%2)</formula>
      <argument type='int' />
      <argument type='bool' />
    </function>
    <function group='operator' name='!=' return-type='bool'>
      <formula>(%1 &lt;&gt; %2)</formula>
      <argument type='str' />
      <argument type='str' />
    </function>
    <function group='operator' name='!=' return-type='bool'>
      <formula>(timestamp(%1) &lt;&gt; %2)</formula>
      <argument type='str' />
      <argument type='datetime' />
    </function>
    <function group='operator' name='!=' return-type='bool'>
      <formula>(%1 &lt;&gt; timestamp(%2))</formula>
      <argument type='datetime' />
      <argument type='str' />
    </function>
    <function group='operator' name='!=' return-type='bool'>
      <formula>(%1 &lt;&gt; %2)</formula>
      <argument type='datetime' />
      <argument type='datetime' />
    </function>
    <function group='operator' name='!=' return-type='bool'>
      <formula>(%1 &lt;&gt; %2)</formula>
      <argument type='datetime' />
      <argument type='date' />
    </function>
    <function group='operator' name='!=' return-type='bool'>
      <formula>(%1 &lt;&gt; %2)</formula>
      <argument type='date' />
      <argument type='datetime' />
    </function>
    <function group='operator' name='!=' return-type='bool'>
      <formula>(%1 &lt;&gt; %2)</formula>
      <argument type='date' />
      <argument type='date' />
    </function>
    <function group='operator' name='%' return-type='real'>
      <formula>modulo_or_zero(%1, %2)</formula>
      <argument type='real' />
      <argument type='real' />
    </function>
    <function group='operator' name='%' return-type='int'>
      <formula>modulo_or_zero(%1, %2)</formula>
      <argument type='int' />
      <argument type='int' />
    </function>
    <function group='operator' name='&amp;&amp;' return-type='bool'>
      <formula>(%1 and %2)</formula>
      <argument type='bool' />
      <argument type='bool' />
    </function>
    <function group='operator' name='*' return-type='real'>
      <formula>(%1 * %2)</formula>
      <argument type='real' />
      <argument type='real' />
    </function>
    <function group='operator' name='*' return-type='real'>
      <formula>(%1 * %2)</formula>
      <argument type='real' />
      <argument type='int' />
    </function>
    <function group='operator' name='*' return-type='real'>
      <formula>(%1 * %2)</formula>
      <argument type='int' />
      <argument type='real' />
    </function>
    <function group='operator' name='*' return-type='int'>
      <formula>(%1 * %2)</formula>
      <argument type='int' />
      <argument type='int' />
    </function>
    <function group='operator' name='+' return-type='real'>
      <formula>(%1 + %2)</formula>
      <argument type='real' />
      <argument type='real' />
    </function>
    <function group='operator' name='+' return-type='int'>
      <formula>(%1 + %2)</formula>
      <argument type='int' />
      <argument type='int' />
    </function>
    <function group='operator' name='+' return-type='str'>
      <formula>concat(%1,%2)</formula>
      <argument type='str' />
      <argument type='str' />
    </function>
    <function group='operator' name='+' return-type='datetime'>
      <formula>(cast(%1 as nullable(datetime)) + %2 * 86400.0)</formula>
      <argument type='datetime' />
      <argument type='real' />
    </function>
    <function group='operator' name='+' return-type='datetime'>
      <formula>cast(date_add(day,%2,%1) as nullable(timestamp))</formula>
      <argument type='datetime' />
      <argument type='int' />
    </function>
    <function group='operator' name='+' return-type='datetime'>
      <formula>(to_date_time(%1) + %2 * 86400.0)</formula>
      <argument type='date' />
      <argument type='real' />
    </function>
    <function group='operator' name='+' return-type='date'>
      <formula>to_date(to_date_time(%1) + %2 * 86400.0)</formula>
      <argument type='date' />
      <argument type='int' />
    </function>
    <function group='operator' name='-' return-type='real'>
      <formula>(-%1)</formula>
      <argument type='real' />
    </function>
    <function group='operator' name='-' return-type='real'>
      <formula>(%1 - %2)</formula>
      <argument type='real' />
      <argument type='real' />
    </function>
    <function group='operator' name='-' return-type='real'>
      <formula>(%1 - %2) / 86400.0</formula>
      <argument type='datetime' />
      <argument type='datetime' />
    </function>
    <function group='operator' name='-' return-type='real'>
      <formula>(%1 - to_date_time(%2)) / 86400.0</formula>
      <argument type='datetime' />
      <argument type='date' />
    </function>
    <function group='operator' name='-' return-type='real'>
      <formula>(to_date_time(%1) - %2) / 86400.0</formula>
      <argument type='date' />
      <argument type='datetime' />
    </function>
    <function group='operator' name='-' return-type='real'>
      <formula>(to_date_time(%1) - to_date_time(%2)) / 86400.0</formula>
      <argument type='date' />
      <argument type='date' />
    </function>
    <function group='operator' name='-' return-type='int'>
      <formula>(-%1)</formula>
      <argument type='int' />
    </function>
    <function group='operator' name='-' return-type='int'>
      <formula>(%1 - %2)</formula>
      <argument type='int' />
      <argument type='int' />
    </function>
    <function group='operator' name='-' return-type='int'>
      <formula>(%1 - %2)</formula>
      <argument type='date' />
      <argument type='date' />
    </function>
    <function group='operator' name='-' return-type='datetime'>
      <formula>date_add(second, - %2 * 86400, %1)</formula>
      <argument type='datetime' />
      <argument type='real' />
    </function>
    <function group='operator' name='-' return-type='datetime'>
      <formula>date_add(second, - %2 * 86400, %1)</formula>
      <argument type='datetime' />
      <argument type='int' />
    </function>
    <function group='operator' name='-' return-type='datetime'>
      <formula>date_add(second, - %2 * 86400, %1)</formula>
      <argument type='date' />
      <argument type='real' />
    </function>
    <function group='operator' name='-' return-type='date'>
      <formula>to_date(date_add(second, - %2 * 86400, %1))</formula>
      <argument type='date' />
      <argument type='int' />
    </function>
    <function group='operator' name='/' return-type='real'>
      <formula>(to_float64(%1) / null_if(%2,0))</formula>
      <argument type='real' />
      <argument type='real' />
    </function>
    <function group='operator' name='/' return-type='real'>
      <formula>(%1 / null_if(%2,0))</formula>
      <argument type='real' />
      <argument type='int' />
    </function>
    <function group='operator' name='/' return-type='real'>
      <formula>(%1 / null_if(%2,0))</formula>
      <argument type='int' />
      <argument type='real' />
    </function>
    <function group='operator' name='/' return-type='real'>
      <formula>(%1 / null_if(%2,0))</formula>
      <argument type='int' />
      <argument type='int' />
    </function>
    <function group='operator' name='&lt;' return-type='bool'>
      <formula>(%1 &lt; %2)</formula>
      <argument type='real' />
      <argument type='real' />
    </function>
    <function group='operator' name='&lt;' return-type='bool'>
      <formula>(%1 &lt; %2)</formula>
      <argument type='str' />
      <argument type='str' />
    </function>
    <function group='operator' name='&lt;' return-type='bool'>
      <formula>(timestamp(%1) &lt; %2)</formula>
      <argument type='str' />
      <argument type='datetime' />
    </function>
    <function group='operator' name='&lt;' return-type='bool'>
      <formula>(%1 &lt; timestamp(%2))</formula>
      <argument type='datetime' />
      <argument type='str' />
    </function>
    <function group='operator' name='&lt;' return-type='bool'>
      <formula>(%1 &lt; %2)</formula>
      <argument type='datetime' />
      <argument type='datetime' />
    </function>
    <function group='operator' name='&lt;' return-type='bool'>
      <formula>(%1 &lt; cast(%2 as nullable(timestamp)))</formula>
      <argument type='datetime' />
      <argument type='date' />
    </function>
    <function group='operator' name='&lt;' return-type='bool'>
      <formula>(cast(%1 as nullable(timestamp)) &lt; %2)</formula>
      <argument type='date' />
      <argument type='datetime' />
    </function>
    <function group='operator' name='&lt;' return-type='bool'>
      <formula>(%1 &lt; %2)</formula>
      <argument type='date' />
      <argument type='date' />
    </function>
    <function group='operator' name='&lt;=' return-type='bool'>
      <formula>(%1 &lt;= %2)</formula>
      <argument type='real' />
      <argument type='real' />
    </function>
    <function group='operator' name='&lt;=' return-type='bool'>
      <formula>(%1 &lt;= %2)</formula>
      <argument type='str' />
      <argument type='str' />
    </function>
    <function group='operator' name='&lt;=' return-type='bool'>
      <formula>(timestamp(%1) &lt;= %2)</formula>
      <argument type='str' />
      <argument type='datetime' />
    </function>
    <function group='operator' name='&lt;=' return-type='bool'>
      <formula>(%1 &lt;= timestamp(%2))</formula>
      <argument type='datetime' />
      <argument type='str' />
    </function>
    <function group='operator' name='&lt;=' return-type='bool'>
      <formula>(%1 &lt;= %2)</formula>
      <argument type='datetime' />
      <argument type='datetime' />
    </function>
    <function group='operator' name='&lt;=' return-type='bool'>
      <formula>(%1 &lt;= cast(%2 as nullable(timestamp)))</formula>
      <argument type='datetime' />
      <argument type='date' />
    </function>
    <function group='operator' name='&lt;=' return-type='bool'>
      <formula>(cast(%1 as nullable(timestamp)) &lt;= %2)</formula>
      <argument type='date' />
      <argument type='datetime' />
    </function>
    <function group='operator' name='&lt;=' return-type='bool'>
      <formula>(%1 &lt;= %2)</formula>
      <argument type='date' />
      <argument type='date' />
    </function>
    <function group='operator' name='==' return-type='bool'>
      <formula>(%1 and %2 or not %1 and not %2)</formula>
      <argument type='bool' />
      <argument type='bool' />
    </function>
    <function group='operator' name='==' return-type='bool'>
      <formula>(%1 and %2 &lt;&gt; 0 or not %1 and %2 = 0)</formula>
      <argument type='bool' />
      <argument type='int' />
    </function>
    <function group='operator' name='==' return-type='bool'>
      <formula>(%1 = %2)</formula>
      <argument type='real' />
      <argument type='real' />
    </function>
    <function group='operator' name='==' return-type='bool'>
      <formula>(%1 &lt;&gt; 0 and %2 or %1 = 0 and not %2)</formula>
      <argument type='int' />
      <argument type='bool' />
    </function>
    <function group='operator' name='==' return-type='bool'>
      <formula>(%1 = %2)</formula>
      <argument type='str' />
      <argument type='str' />
    </function>
    <function group='operator' name='==' return-type='bool'>
      <formula>(timestamp(%1) = %2)</formula>
      <argument type='str' />
      <argument type='datetime' />
    </function>
    <function group='operator' name='==' return-type='bool'>
      <formula>(%1 = timestamp(%2))</formula>
      <argument type='datetime' />
      <argument type='str' />
    </function>
    <function group='operator' name='==' return-type='bool'>
      <formula>(%1 = %2)</formula>
      <argument type='datetime' />
      <argument type='datetime' />
    </function>
    <function group='operator' name='==' return-type='bool'>
      <formula>(%1 = to_date_time(%2))</formula>
      <argument type='datetime' />
      <argument type='date' />
    </function>
    <function group='operator' name='==' return-type='bool'>
      <formula>(cast(%1 as nullable(timestamp)) = %2)</formula>
      <argument type='date' />
      <argument type='datetime' />
    </function>
    <function group='operator' name='==' return-type='bool'>
      <formula>(%1 = %2)</formula>
      <argument type='date' />
      <argument type='date' />
    </function>
    <function group='operator' name='&gt;' return-type='bool'>
      <formula>(%1 &gt; %2)</formula>
      <argument type='real' />
      <argument type='real' />
    </function>
    <function group='operator' name='&gt;' return-type='bool'>
      <formula>(%1 &gt; %2)</formula>
      <argument type='str' />
      <argument type='str' />
    </function>
    <function group='operator' name='&gt;' return-type='bool'>
      <formula>(timestamp(%1) &gt; %2)</formula>
      <argument type='str' />
      <argument type='datetime' />
    </function>
    <function group='operator' name='&gt;' return-type='bool'>
      <formula>(%1 &gt; timestamp(%2))</formula>
      <argument type='datetime' />
      <argument type='str' />
    </function>
    <function group='operator' name='&gt;' return-type='bool'>
      <formula>(%1 &gt; %2)</formula>
      <argument type='datetime' />
      <argument type='datetime' />
    </function>
    <function group='operator' name='&gt;' return-type='bool'>
      <formula>(%1 &gt; cast(%2 as nullable(timestamp)))</formula>
      <argument type='datetime' />
      <argument type='date' />
    </function>
    <function group='operator' name='&gt;' return-type='bool'>
      <formula>(cast(%1 as nullable(timestamp)) &gt; %2)</formula>
      <argument type='date' />
      <argument type='datetime' />
    </function>
    <function group='operator' name='&gt;' return-type='bool'>
      <formula>(%1 &gt; %2)</formula>
      <argument type='date' />
      <argument type='date' />
    </function>
    <function group='operator' name='&gt;=' return-type='bool'>
      <formula>(%1 &gt;= %2)</formula>
      <argument type='real' />
      <argument type='real' />
    </function>
    <function group='operator' name='&gt;=' return-type='bool'>
      <formula>(%1 &gt;= %2)</formula>
      <argument type='str' />
      <argument type='str' />
    </function>
    <function group='operator' name='&gt;=' return-type='bool'>
      <formula>(timestamp(%1) &gt;= %2)</formula>
      <argument type='str' />
      <argument type='datetime' />
    </function>
    <function group='operator' name='&gt;=' return-type='bool'>
      <formula>(%1 &gt;= timestamp(%2))</formula>
      <argument type='datetime' />
      <argument type='str' />
    </function>
    <function group='operator' name='&gt;=' return-type='bool'>
      <formula>(%1 &gt;= %2)</formula>
      <argument type='datetime' />
      <argument type='datetime' />
    </function>
    <function group='operator' name='&gt;=' return-type='bool'>
      <formula>(%1 &gt;= cast(%2 as nullable(timestamp)))</formula>
      <argument type='datetime' />
      <argument type='date' />
    </function>
    <function group='operator' name='&gt;=' return-type='bool'>
      <formula>(to_date_time(%1) &gt;= %2)</formula>
      <argument type='date' />
      <argument type='datetime' />
    </function>
    <function group='operator' name='&gt;=' return-type='bool'>
      <formula>(%1 &gt;= %2)</formula>
      <argument type='date' />
      <argument type='date' />
    </function>
    <function group='operator' name='^^' return-type='real'>
      <formula>(case when %1 &lt; 0 and trunc(%2) &lt;&gt; %2 then null else power(%1,%2) end)</formula>
      <argument type='real' />
      <argument type='real' />
    </function>
    <function group='operator' name='^^' return-type='real'>
      <formula>(case when %1 &lt; 0 and floor(%2) &lt;&gt; %2 then null else power(%1,%2) end)</formula>
      <argument type='real' />
      <argument type='int' />
    </function>
    <function group='operator' name='^^' return-type='real'>
      <formula>power(cast(%1 as float),%2)</formula>
      <argument type='int' />
      <argument type='int' />
    </function>
    <function group='operator' name='||' return-type='bool'>
      <formula>(%1 or %2)</formula>
      <argument type='bool' />
      <argument type='bool' />
    </function>
    <function group='date' name='DATE_BIN' return-type='datetime'>
      <formula>to_start_of_interval(%3, interval %2 %1)</formula>
      <argument type='localstr' />
      <argument type='int' />
      <argument type='datetime' />
    </function>
    <function group='date' name='DATE_BIN' return-type='datetime'>
      <formula>to_start_of_interval(%3, interval %2 %1)</formula>
      <argument type='localstr' />
      <argument type='int' />
      <argument type='date' />
    </function>
    <function group='date' name='DAY' return-type='int'>
      <formula>to_day_of_month(%1)</formula>
      <argument type='datetime' />
    </function>
    <function group='date' name='DAY' return-type='int'>
      <formula>to_day_of_month(%1)</formula>
      <argument type='date' />
    </function>
    <function group='date' name='ISDATE' return-type='bool'>
      <formula>(cast(%1 as nullable(date)) is not null)</formula>
      <argument type='str' />
    </function>
    <function group='date' name='ISOQUARTER' return-type='int'>
      <formula>if(is_null(%1), null, least(ceiling(to_iso_week(%1) / 13), 4))</formula>
      <argument type='date' />
    </function>
    <function group='date' name='ISOQUARTER' return-type='int'>
      <formula>if(is_null(%1), null, least(ceiling(to_iso_week(%1) / 13), 4))</formula>
      <argument type='datetime' />
    </function>
    <function group='date' name='ISOWEEK' return-type='int'>
      <formula>if(is_null(%1), null, to_iso_week(%1))</formula>
      <argument type='date' />
    </function>
    <function group='date' name='ISOWEEK' return-type='int'>
      <formula>if(is_null(%1), null, to_iso_week(%1))</formula>
      <argument type='datetime' />
    </function>
    <function group='date' name='ISOWEEKDAY' return-type='int'>
      <formula>if(is_null(%1), null, to_day_of_week(%1))</formula>
      <argument type='date' />
    </function>
    <function group='date' name='ISOWEEKDAY' return-type='int'>
      <formula>if(is_null(%1), null, to_day_of_week(%1))</formula>
      <argument type='datetime' />
    </function>
    <function group='date' name='ISOYEAR' return-type='int'>
      <formula>if(is_null(%1), null, to_iso_year(%1))</formula>
      <argument type='date' />
    </function>
    <function group='date' name='ISOYEAR' return-type='int'>
      <formula>if(is_null(%1), null, to_iso_year(%1))</formula>
      <argument type='datetime' />
    </function>
    <function group='date' name='MAX' return-type='datetime'>
      <formula>greatest(%1, %2)</formula>
      <argument type='datetime' />
      <argument type='datetime' />
    </function>
    <function group='date' name='MAX' return-type='date'>
      <formula>greatest(%1, %2)</formula>
      <argument type='date' />
      <argument type='date' />
    </function>
    <function group='date' name='MIN' return-type='datetime'>
      <formula>least(%1, %2)</formula>
      <argument type='datetime' />
      <argument type='datetime' />
    </function>
    <function group='date' name='MIN' return-type='date'>
      <formula>least(%1, %2)</formula>
      <argument type='date' />
      <argument type='date' />
    </function>
    <function group='date' name='MONTH' return-type='int'>
      <formula>month(%1)</formula>
      <argument type='datetime' />
    </function>
    <function group='date' name='MONTH' return-type='int'>
      <formula>month(%1)</formula>
      <argument type='date' />
    </function>
    <function group='date' name='NOW' return-type='datetime'>
      <formula>now()</formula>
    </function>
    <function group='date' name='TIMESTAMP_TO_USEC' return-type='int'>
      <formula>to_unix_timestamp64_micro(cast(%1, 'nullable(date_time64(6))'))</formula>
      <argument type='datetime' />
    </function>
    <function group='date' name='TODAY' return-type='date'>
      <formula>today()</formula>
    </function>
    <function group='date' name='USEC_TO_TIMESTAMP' return-type='datetime'>
      <formula>to_date_time(from_unix_timestamp64_micro(%1))</formula>
      <argument type='int' />
    </function>
    <function group='date' name='YEAR' return-type='int'>
      <formula>to_year(%1)</formula>
      <argument type='datetime' />
    </function>
    <function group='date' name='YEAR' return-type='int'>
      <formula>to_year(%1)</formula>
      <argument type='date' />
    </function>
    <!--
      date-function
      doesn't require a group. can contain multiple formulas
      for different date parts. if a part-specific formula is missing, tableau
      will use the generic (no part attribute) formula.
    -->
    <date-function name='DATEADD' return-type='datetime'>
      <formula>cast(date_add(%1, %2, %3) as nullable(date_time))</formula>
      <argument type='localstr' />
      <argument type='real' />
      <argument type='datetime' />
    </date-function>
    <date-function name='DATEADD' return-type='datetime'>
      <formula>cast(date_add(%1, %2, %3) as nullable(date_time))</formula>
      <formula part='iso-year'>cast(multi_if(is_null(%2) or is_null(%3), null, %2 == 0, %3, date_add(week, sign(%2) * array_sum(array_slice(array_flatten(array_map((y) -> to_iso_week(to_start_of_iso_year(date_add(year, 1, to_date(concat(to_string(y), '-01-01')) + 7)) - 1), array_sort((ys) -> sign(%2) * ys, range(to_uint16_or_default(least(to_iso_year(to_datetime_or_default(%3)), to_iso_year(to_datetime_or_default(%3)) + to_int16_or_default(%2) + sign(to_int16_or_default(%2)))), to_uint16_or_default(greatest(to_iso_year(to_datetime_or_default(%3)), to_iso_year(to_datetime_or_default(%3)) + to_int16_or_default(%2) + sign(to_int16_or_default(%2)))), 1)))), greater_or_equals(%2,0) + to_int16((1-sign(to_int16_or_default(%2)))/2), abs(to_int16_or_default(%2)))), %3)) as nullable(date_time))</formula>
      <formula part='iso-quarter'>cast(multi_if(is_null(%2) or is_null(%3), null, %2 == 0, if(to_iso_week(to_start_of_iso_year(date_add(year, 1, to_date(concat(to_string(to_iso_year(%3)),'-01-01')) + 7)) - 1) = 53 and to_iso_week(%3) > 39, date_add(week, 1, %3), %3), date_add(week, -13 + sign(%2) * array_sum(array_slice(array_flatten(array_map((q) -> array_sort((s) -> sign(to_int16_or_default(%2))*s, [13,13,13, q - 39]), array_map((y) -> to_iso_week(to_start_of_iso_year(date_add(year, 1, to_date(concat(to_string(y), '-01-01')) + 7)) - 1), array_sort((ys) -> sign(%2) * ys, range(to_uint16_or_default(least(to_iso_year(to_datetime_or_default(%3)), to_iso_year(to_datetime_or_default(%3)) + to_int16_or_default(%2) + sign(to_int16_or_default(%2)))), to_uint16_or_default(greatest(to_iso_year(to_datetime_or_default(%3)), to_iso_year(to_datetime_or_default(%3)) + to_int16_or_default(%2) + sign(to_int16_or_default(%2)))) + 1, 1))))), 3*(1 - sign(to_int16_or_default(%2))) - (-sign(to_int16_or_default(%2))) * to_int8(least(ceiling(to_iso_week(to_datetime_or_default(%3)) / 13), 4)), abs(to_int16_or_default(%2)) + sign(to_int16_or_default(%2)))), %3)) as nullable(date_time))</formula>
      <formula part='iso-week'>cast(if(is_null(%2) or is_null(%3), null, date_add(week, %2, %3)) as nullable(date_time))</formula>
      <formula part='iso-weekday'>cast(if(is_null(%2) or is_null(%3), null, date_add(day, %2, %3)) as nullable(date_time))</formula>
      <argument type='localstr' />
      <argument type='int' />
      <argument type='datetime' />
    </date-function>
    <date-function name='DATEDIFF' return-type='int'>
      <formula>cast(date_diff('%1', %2, %3) as nullable(integer))</formula>
      <formula part='iso-year'>cast(to_iso_year(%3) - to_iso_year(%2) as nullable(integer))</formula>
      <formula part='iso-quarter'>cast(if(is_null(%2) or is_null(%3), null, sign(%3-%2) * length(array_filter((i) -> less_or_equals(i, date_diff(week, date_add(day, least(floor((to_iso_week(least(to_datetime_or_default(%2), to_datetime_or_default(%3)))-1)/13),3)*13*7, to_start_of_iso_year(least(to_datetime_or_default(%2), to_datetime_or_default(%3)))), greatest(to_datetime_or_default(%2), to_datetime_or_default(%3)))), array_cum_sum(array_slice(array_flatten(array_map((q) -> array_sort((s) -> sign(%3-%2)*s, [13,13,13, q - 39]), array_map((y) -> to_iso_week(to_start_of_iso_year(date_add(year, 1, to_date(concat(to_string(y), '-01-01')) + 7)) - 1), array_sort((s) -> sign(%3-%2)*s, range(to_uint16(to_iso_year(to_start_of_iso_year(least(to_datetime_or_default(%2), to_datetime_or_default(%3))))),to_iso_year(greatest(to_datetime_or_default(%2), to_datetime_or_default(%3)))+1, 1))))), if(greater_or_equals(%3,%2), 1+to_int16(least(floor((to_iso_week(least(to_datetime_or_default(%2), to_datetime_or_default(%3)))-1)/13),3)), 5-to_int16(least(floor((to_iso_week(greatest(to_datetime_or_default(%2), to_datetime_or_default(%3))))/13),4)))))))) as nullable(integer))</formula>
      <formula part='week'>cast(date_diff('%1', to_start_of_week(%2, 8), to_start_of_week(%3, 8)) as nullable(integer))</formula>
      <formula part='iso-week'>cast(sign(date_diff(day, %2, %3)) * date_diff(week, to_start_of_week(least(%2, %3), 3), greatest(%2, %3)) as nullable(integer))</formula>
      <formula part='iso-weekday'>cast(date_diff(day, %2, %3) as nullable(integer))</formula>
      <argument type='localstr' />
      <argument type='datetime' />
      <argument type='datetime' />
    </date-function>
    <date-function name='DATEDIFF' return-type='int'>
      <formula>cast(date_diff('%1', %2, %3) as nullable(integer))</formula>
      <formula part='iso-year'>cast(to_iso_year(%3) - to_iso_year(%2) as nullable(integer))</formula>
      <formula part='iso-quarter'>cast(if(is_null(%2) or is_null(%3), null, sign(%3-%2) * length(array_filter((i) -> less_or_equals(i, date_diff(week, date_add(day, least(floor((to_iso_week(least(to_datetime_or_default(%2), to_datetime_or_default(%3)))-1)/13),3)*13*7, to_start_of_iso_year(least(to_datetime_or_default(%2), to_datetime_or_default(%3)))), greatest(to_datetime_or_default(%2), to_datetime_or_default(%3)))), array_cum_sum(array_slice(array_flatten(array_map((q) -> array_sort((s) -> sign(%3-%2)*s, [13,13,13, q - 39]), array_map((y) -> to_iso_week(to_start_of_iso_year(date_add(year, 1, to_date(concat(to_string(y), '-01-01')) + 7)) - 1), array_sort((s) -> sign(%3-%2)*s, range(to_uint16(to_iso_year(to_start_of_iso_year(least(to_datetime_or_default(%2), to_datetime_or_default(%3))))),to_iso_year(greatest(to_datetime_or_default(%2), to_datetime_or_default(%3)))+1, 1))))), if(greater_or_equals(%3,%2), 1+to_int16(least(floor((to_iso_week(least(to_datetime_or_default(%2), to_datetime_or_default(%3)))-1)/13),3)), 5-to_int16(least(floor((to_iso_week(greatest(to_datetime_or_default(%2), to_datetime_or_default(%3))))/13),4)))))))) as nullable(integer))</formula>
      <formula part='week'>cast(date_diff('%1', to_start_of_week(%2, 8), to_start_of_week(%3, 8)) as nullable(integer))</formula>
      <formula part='iso-week'>cast(sign(date_diff(day, %2, %3)) * date_diff(week, to_start_of_week(least(%2, %3), 3), greatest(%2, %3)) as nullable(integer))</formula>
      <formula part='iso-weekday'>cast(date_diff(day, %2, %3) as nullable(integer))</formula>
      <argument type='localstr' />
      <argument type='datetime' />
      <argument type='date' />
    </date-function>
    <date-function name='DATEDIFF' return-type='int'>
      <formula>cast(date_diff('%1', %2, %3) as nullable(integer))</formula>
      <formula part='iso-year'>cast(to_iso_year(%3) - to_iso_year(%2) as nullable(integer))</formula>
      <formula part='iso-quarter'>cast(if(is_null(%2) or is_null(%3), null, sign(%3-%2) * length(array_filter((i) -> less_or_equals(i, date_diff(week, date_add(day, least(floor((to_iso_week(least(to_datetime_or_default(%2), to_datetime_or_default(%3)))-1)/13),3)*13*7, to_start_of_iso_year(least(to_datetime_or_default(%2), to_datetime_or_default(%3)))), greatest(to_datetime_or_default(%2), to_datetime_or_default(%3)))), array_cum_sum(array_slice(array_flatten(array_map((q) -> array_sort((s) -> sign(%3-%2)*s, [13,13,13, q - 39]), array_map((y) -> to_iso_week(to_start_of_iso_year(date_add(year, 1, to_date(concat(to_string(y), '-01-01')) + 7)) - 1), array_sort((s) -> sign(%3-%2)*s, range(to_uint16(to_iso_year(to_start_of_iso_year(least(to_datetime_or_default(%2), to_datetime_or_default(%3))))),to_iso_year(greatest(to_datetime_or_default(%2), to_datetime_or_default(%3)))+1, 1))))), if(greater_or_equals(%3,%2), 1+to_int16(least(floor((to_iso_week(least(to_datetime_or_default(%2), to_datetime_or_default(%3)))-1)/13),3)), 5-to_int16(least(floor((to_iso_week(greatest(to_datetime_or_default(%2), to_datetime_or_default(%3))))/13),4)))))))) as nullable(integer))</formula>
      <formula part='week'>cast(date_diff('%1', to_start_of_week(%2, 8), to_start_of_week(%3, 8)) as nullable(integer))</formula>
      <formula part='iso-week'>cast(sign(date_diff(day, %2, %3)) * date_diff(week, to_start_of_week(least(%2, %3), 3), greatest(%2, %3)) as nullable(integer))</formula>
      <formula part='iso-weekday'>cast(date_diff(day, %2, %3) as nullable(integer))</formula>
      <argument type='localstr' />
      <argument type='date' />
      <argument type='datetime' />
    </date-function>
    <date-function name='DATEDIFF' return-type='int'>
      <formula>cast(date_diff('%1', %2, %3) as nullable(integer))</formula>
      <formula part='iso-year'>cast(to_iso_year(%3) - to_iso_year(%2) as nullable(integer))</formula>
      <formula part='iso-quarter'>cast(if(is_null(%2) or is_null(%3), null, sign(%3-%2) * length(array_filter((i) -> less_or_equals(i, date_diff(week, date_add(day, least(floor((to_iso_week(least(to_datetime_or_default(%2), to_datetime_or_default(%3)))-1)/13),3)*13*7, to_start_of_iso_year(least(to_datetime_or_default(%2), to_datetime_or_default(%3)))), greatest(to_datetime_or_default(%2), to_datetime_or_default(%3)))), array_cum_sum(array_slice(array_flatten(array_map((q) -> array_sort((s) -> sign(%3-%2)*s, [13,13,13, q - 39]), array_map((y) -> to_iso_week(to_start_of_iso_year(date_add(year, 1, to_date(concat(to_string(y), '-01-01')) + 7)) - 1), array_sort((s) -> sign(%3-%2)*s, range(to_uint16(to_iso_year(to_start_of_iso_year(least(to_datetime_or_default(%2), to_datetime_or_default(%3))))),to_iso_year(greatest(to_datetime_or_default(%2), to_datetime_or_default(%3)))+1, 1))))), if(greater_or_equals(%3,%2), 1+to_int16(least(floor((to_iso_week(least(to_datetime_or_default(%2), to_datetime_or_default(%3)))-1)/13),3)), 5-to_int16(least(floor((to_iso_week(greatest(to_datetime_or_default(%2), to_datetime_or_default(%3))))/13),4)))))))) as nullable(integer))</formula>
      <formula part='week'>cast(date_diff('%1', to_start_of_week(%2, 8), to_start_of_week(%3, 8)) as nullable(integer))</formula>
      <formula part='iso-week'>cast(sign(date_diff(day, %2, %3)) * date_diff(week, to_start_of_week(least(%2, %3), 3), greatest(%2, %3)) as nullable(integer))</formula>
      <formula part='iso-weekday'>cast(date_diff(day, %2, %3) as nullable(integer))</formula>
      <argument type='localstr' />
      <argument type='date' />
      <argument type='date' />
    </date-function>
    <date-function name='DATEDIFF' return-type='int'>
      <formula>cast(date_diff('%1', %2, %3) as nullable(integer))</formula>
      <formula part='week'>cast(date_diff('%1', to_start_of_week(%2, (case when %4=0 then 8 when %4=1 then 9 else 8 end)), to_start_of_week(%3, (case when %4=0 then 8 when %4=1 then 9 else 8 end))) as nullable(integer))</formula>
      <argument type='localstr' />
      <argument type='datetime' />
      <argument type='datetime' />
      <argument type='localstr' />
    </date-function>
    <date-function name='DATEDIFF' return-type='int'>
      <formula>cast(date_diff('%1', %2, %3) as nullable(integer))</formula>
      <formula part='week'>cast(date_diff('%1', to_start_of_week(%2, (case when %4=0 then 8 when %4=1 then 9 else 8 end)), to_start_of_week(%3, (case when %4=0 then 8 when %4=1 then 9 else 8 end))) as nullable(integer))</formula>
      <argument type='localstr' />
      <argument type='datetime' />
      <argument type='date' />
      <argument type='localstr' />
    </date-function>
    <date-function name='DATEDIFF' return-type='int'>
      <formula>cast(date_diff('%1', %2, %3) as nullable(integer))</formula>
      <formula part='week'>cast(date_diff('%1', to_start_of_week(%2, (case when %4=0 then 8 when %4=1 then 9 else 8 end)), to_start_of_week(%3, (case when %4=0 then 8 when %4=1 then 9 else 8 end))) as nullable(integer))</formula>
      <argument type='localstr' />
      <argument type='date' />
      <argument type='datetime' />
      <argument type='localstr' />
    </date-function>
    <date-function name='DATEDIFF' return-type='int'>
      <formula>cast(date_diff('%1', %2, %3) as nullable(integer))</formula>
      <formula part='week'>cast(date_diff('%1', to_start_of_week(%2, (case when %4=0 then 8 when %4=1 then 9 else 8 end)), to_start_of_week(%3, (case when %4=0 then 8 when %4=1 then 9 else 8 end))) as nullable(integer))</formula>
      <argument type='localstr' />
      <argument type='date' />
      <argument type='date' />
      <argument type='localstr' />
    </date-function>
    <date-function name='DATENAME' return-type='str'>
      <formula part='year'>cast(date_name('year',%2) as nullable(string))</formula>
      <formula part='iso-year'>cast(to_iso_year(%2) as nullable(string))</formula>
      <formula part='quarter'>cast(date_name('quarter',%2) as nullable(string))</formula>
      <formula part='iso-quarter'>cast(least(ceiling(to_iso_week(%2)/13),4) as nullable(string))</formula>
      <formula part='month'>cast(date_name('month',%2) as nullable(string))</formula>
      <formula part='dayofyear'>cast(date_name('dayofyear',%2) as nullable(string))</formula>
      <formula part='day'>cast(date_name('day',%2) as nullable(string))</formula>
      <formula part='weekday'>cast(date_name('weekday',%2) as nullable(string))</formula>
      <formula part='iso-weekday'>cast(to_day_of_week(%2) as nullable(string))</formula>
      <formula part='week'>cast(to_week(%2, 8) as nullable(string))</formula>
      <formula part='iso-week'>cast(to_iso_week(%2) as nullable(string))</formula>
      <formula part='hour'>cast(date_name('hour',%2) as nullable(string))</formula>
      <formula part='minute'>cast(date_name('minute',%2) as nullable(string))</formula>
      <formula part='second'>cast(date_name('second',%2) as nullable(string))</formula>
      <argument type='localstr' />
      <argument type='datetime' />
    </date-function>
    <date-function name='DATENAME' return-type='str'>
      <formula part='year'>cast(date_name('year',%2) as nullable(string))</formula>
      <formula part='iso-year'>cast(to_iso_year(%2) as nullable(string))</formula>
      <formula part='quarter'>cast(date_name('quarter',%2) as nullable(string))</formula>
      <formula part='iso-quarter'>cast(if(is_null(%2), null, least(ceiling(to_iso_week(%2)/13),4)) as nullable(string))</formula>
      <formula part='month'>cast(date_name('month',%2) as nullable(string))</formula>
      <formula part='dayofyear'>cast(date_name('dayofyear',%2) as nullable(string))</formula>
      <formula part='day'>cast(date_name('day',%2) as nullable(string))</formula>
      <formula part='weekday'>cast(date_name('weekday',%2) as nullable(string))</formula>
      <formula part='iso-weekday'>cast(to_day_of_week(%2) as nullable(string))</formula>
      <formula part='week'>cast(to_week(%2, 8) as nullable(string))</formula>
      <formula part='iso-week'>cast(left_pad(to_string(to_iso_week(%2)), 2, '0') as nullable(string))</formula>
      <formula part='hour'>cast(date_name('hour',%2) as nullable(string))</formula>
      <formula part='minute'>cast(date_name('minute',%2) as nullable(string))</formula>
      <formula part='second'>cast(date_name('second',%2) as nullable(string))</formula>
      <argument type='localstr' />
      <argument type='date' />
    </date-function>
    <date-function name='DATENAME' return-type='str'>
      <formula part='year'>cast(date_name('year',%2) as nullable(string))</formula>
      <formula part='quarter'>cast(date_name('quarter',%2) as nullable(string))</formula>
      <formula part='month'>cast(date_name('month',%2) as nullable(string))</formula>
      <formula part='dayofyear'>cast(date_name('dayofyear',%2) as nullable(string))</formula>
      <formula part='day'>cast(date_name('day',%2) as nullable(string))</formula>
      <formula part='weekday'>cast(date_name('weekday',%2) as nullable(string))</formula>
      <formula part='week'>cast(to_week(%2, (case when %3=0 then 8 when %3=1 then 9 else 8 end)) as nullable(string))</formula>
      <formula part='hour'>cast(date_name('hour',%2) as nullable(string))</formula>
      <formula part='minute'>cast(date_name('minute',%2) as nullable(string))</formula>
      <formula part='second'>cast(date_name('second',%2) as nullable(string))</formula>
      <argument type='localstr' />
      <argument type='datetime' />
      <argument type='localstr' />
    </date-function>
    <date-function name='DATENAME' return-type='str'>
      <formula part='year'>cast(date_name('year',%2) as nullable(string))</formula>
      <formula part='quarter'>cast(date_name('quarter',%2) as nullable(string))</formula>
      <formula part='month'>cast(date_name('month',%2) as nullable(string))</formula>
      <formula part='dayofyear'>cast(date_name('dayofyear',%2) as nullable(string))</formula>
      <formula part='day'>cast(date_name('day',%2) as nullable(string))</formula>
      <formula part='weekday'>cast(date_name('weekday',%2) as nullable(string))</formula>
      <formula part='week'>cast(to_week(%2, (case when %3=0 then 8 when %3=1 then 9 else 8 end)) as nullable(string))</formula>
      <formula part='hour'>cast(date_name('hour',%2) as nullable(string))</formula>
      <formula part='minute'>cast(date_name('minute',%2) as nullable(string))</formula>
      <formula part='second'>cast(date_name('second',%2) as nullable(string))</formula>
      <argument type='localstr' />
      <argument type='date' />
      <argument type='localstr' />
    </date-function>
    <date-function name='DATEPARSE' return-type='datetime'>
      <formula>parse_date_time_best_effort_or_null(%2)</formula>
      <argument type='localstr' />
      <argument type='str' />
    </date-function>
    <date-function name='DATEPART' return-type='int'>
      <formula part='year'>to_year(%2)</formula>
      <formula part='iso-year'>if(is_null(%2), null, to_iso_year(%2))</formula>
      <formula part='quarter'>to_quarter(%2)</formula>
      <formula part='iso-quarter'>if(is_null(%2), null, least(ceiling(to_iso_week(%2) / 13), 4))</formula>
      <formula part='month'>to_month(%2)</formula>
      <formula part='dayofyear'>to_day_of_year(%2)</formula>
      <formula part='day'>to_day_of_month(%2)</formula>
      <formula part='weekday'>to_day_of_week(%2) mod 7 + 1</formula>
      <formula part='iso-weekday'>if(is_null(%2), null, to_day_of_week(%2))</formula>
      <formula part='week'>to_week(%2, 8)</formula>
      <formula part='iso-week'>if(is_null(%2), null, to_iso_week(%2))</formula>
      <formula part='hour'>to_hour(%2)</formula>
      <formula part='minute'>to_minute(%2)</formula>
      <formula part='second'>to_second(%2)</formula>
      <argument type='localstr' />
      <argument type='datetime' />
    </date-function>
    <date-function name='DATEPART' return-type='int'>
      <formula part='year'>to_year(%2)</formula>
      <formula part='iso-year'>if(is_null(%2), null, to_iso_year(%2))</formula>
      <formula part='quarter'>to_quarter(%2)</formula>
      <formula part='iso-quarter'>if(is_null(%2), null, least(ceiling(to_iso_week(%2) / 13), 4))</formula>
      <formula part='month'>to_month(%2)</formula>
      <formula part='dayofyear'>to_day_of_year(%2)</formula>
      <formula part='day'>to_day_of_month(%2)</formula>
      <formula part='weekday'>to_day_of_week(%2) mod 7 + 1</formula>
      <formula part='iso-weekday'>if(is_null(%2), null, to_day_of_week(%2))</formula>
      <formula part='week'>to_week(%2, 8)</formula>
      <formula part='iso-week'>to_iso_week(%2)</formula>
      <formula part='hour'>to_hour(%2)</formula>
      <formula part='minute'>to_minute(%2)</formula>
      <formula part='second'>to_second(%2)</formula>
      <argument type='localstr' />
      <argument type='date' />
    </date-function>
    <date-function name='DATEPART' return-type='int'>
      <formula part='year'>to_year(%2)</formula>
      <formula part='quarter'>to_quarter(%2)</formula>
      <formula part='month'>to_month(%2)</formula>
      <formula part='dayofyear'>to_day_of_year(%2)</formula>
      <formula part='day'>to_day_of_month(%2)</formula>
      <formula part='weekday'>to_day_of_week(%2) mod 7 + 1</formula>
      <formula part='week'>to_week(%2, (case when %3=0 then 8 when %3=1 then 9 else 8 end))</formula>
      <formula part='hour'>to_hour(%2)</formula>
      <formula part='minute'>to_minute(%2)</formula>
      <formula part='second'>to_second(%2)</formula>
      <argument type='localstr' />
      <argument type='datetime' />
      <argument type='localstr' />
    </date-function>
    <date-function name='DATEPART' return-type='int'>
      <formula part='year'>to_year(%2)</formula>
      <formula part='quarter'>to_quarter(%2)</formula>
      <formula part='month'>to_month(%2)</formula>
      <formula part='dayofyear'>to_day_of_year(%2)</formula>
      <formula part='day'>to_day_of_month(%2)</formula>
      <formula part='weekday'>to_day_of_week(%2) mod 7 + 1</formula>
      <formula part='week'>to_week(%2, (case when %3=0 then 8 when %3=1 then 9 else 8 end))</formula>
      <formula part='hour'>to_hour(%2)</formula>
      <formula part='minute'>to_minute(%2)</formula>
      <formula part='second'>to_second(%2)</formula>
      <argument type='localstr' />
      <argument type='date' />
      <argument type='localstr' />
    </date-function>
    <date-function name='DATETRUNC' return-type='datetime'>
      <formula>to_start_of_interval(%2, interval 1 %1)</formula>
      <formula part='iso-year'>if(is_null(%2), null, to_start_of_iso_year(%2))</formula>
      <formula part='iso-quarter'>if(is_null(%2), null, date_add(day, least(floor((to_iso_week(%2) - 1) / 13), 3) * 13 * 7, to_start_of_iso_year(%2)))</formula>
      <formula part='week'>to_start_of_week(%2, 8)</formula>
      <formula part='iso-week'>if(is_null(%2), null, to_start_of_week(%2, 3))</formula>
      <formula part='iso-weekday'>if(is_null(%2), null, to_start_of_day(%2))</formula>
      <argument type='localstr' />
      <argument type='datetime' />
    </date-function>
    <date-function name='DATETRUNC' return-type='datetime'>
      <formula>to_start_of_interval(%2, interval 1 %1)</formula>
      <formula part='iso-year'>if(is_null(%2), null, to_start_of_iso_year(%2))</formula>
      <formula part='iso-quarter'>if(is_null(%2), null, date_add(day, least(floor((to_iso_week(%2) - 1) / 13), 3) * 13 * 7, to_start_of_iso_year(%2)))</formula>
      <formula part='week'>to_start_of_week(%2, 8)</formula>
      <formula part='iso-week'>if(is_null(%2), null, to_start_of_week(%2, 3))</formula>
      <formula part='iso-weekday'>if(is_null(%2), null, to_start_of_day(%2))</formula>
      <argument type='localstr' />
      <argument type='date' />
    </date-function>
    <date-function name='DATETRUNC' return-type='datetime'>
      <formula>to_start_of_interval(%2, interval 1 %1)</formula>
      <formula part='week'>to_start_of_week(%2, (case when %3=0 then 8 when %3=1 then 9 else 8 end))</formula>
      <argument type='localstr' />
      <argument type='datetime' />
      <argument type='localstr' />
    </date-function>
    <date-function name='DATETRUNC' return-type='datetime'>
      <formula>to_start_of_interval(%2, interval 1 %1)</formula>
      <formula part='week'>to_start_of_week(%2, (case when %3=0 then 8 when %3=1 then 9 else 8 end))</formula>
      <argument type='localstr' />
      <argument type='date' />
      <argument type='localstr' />
    </date-function>
  </function-map>
  <!--
    supported-aggregations
    comprehensive list of supported aggregations and date truncations
  -->
  <supported-aggregations>
    <aggregation value='agg_count'/>
    <aggregation value='agg_countd'/>
    <aggregation value='agg_sum'/>
    <aggregation value='agg_avg'/>
    <aggregation value='agg_min'/>
    <aggregation value='agg_max'/>
    <aggregation value='agg_stdev'/>
    <aggregation value='agg_stdevp'/>
    <aggregation value='agg_var'/>
    <aggregation value='agg_varp'/>
    <aggregation value='agg_covar'/>
    <aggregation value='agg_covarp'/>
    <aggregation value='agg_corr'/>
    <aggregation value='agg_sum_xsqr'/>
    <aggregation value='agg_attr'/>
    <aggregation value='agg_median'/>
    <aggregation value='agg_percentile'/>
    <aggregation value='agg_skewness'/>
    <aggregation value='agg_kurtosis'/>
    <aggregation value='agg_inout'/>
<!--
    <aggregation value='agg_collect'/>
    <aggregation value='agg_quart1'/>
    <aggregation value='agg_quart3'/>
    <aggregation value='agg_user'/>
-->
    <aggregation value='agg_year'/>
    <aggregation value='agg_qtr'/>
    <aggregation value='agg_month'/>
    <aggregation value='agg_day'/>
    <aggregation value='agg_week'/>
    <aggregation value='agg_weekday'/>
    <aggregation value='agg_monthyear'/>
    <aggregation value='agg_mdy'/>
    <aggregation value='agg_hour'/>
    <aggregation value='agg_minute'/>
    <aggregation value='agg_second'/>
    <aggregation value='agg_iso_year'/>
    <aggregation value='agg_iso_qtr'/>
    <aggregation value='agg_iso_week'/>
    <aggregation value='agg_iso_weekday'/>

    <aggregation value='trunc_year'/>
    <aggregation value='trunc_qtr'/>
    <aggregation value='trunc_month'/>
    <aggregation value='trunc_day'/>
    <aggregation value='trunc_week'/>
    <aggregation value='trunc_hour'/>
    <aggregation value='trunc_minute'/>
    <aggregation value='trunc_second'/>
    <aggregation value='trunc_iso_year'/>
    <aggregation value='trunc_iso_qtr'/>
    <aggregation value='trunc_iso_week'/>
    <aggregation value='trunc_iso_weekday'/>
   </supported-aggregations>

  <!--
    sql-format
    Strategies and formulas for SQL expressions that
    are too complex for simple function mapping
  -->
  <sql-format>
    <!--
      date-parts
      Used with generic (non-part-specific) date function formulas.
      A date-part-group can apply to one or more date functions, denoted
      by date-function child elements. If none are specified, the group
      acts as the default.

      The name attribute specifies a Tableau date part, while the
      value attribute contains the date part string literal to use in
      corresponding date functions.
    -->
    <date-parts>
      <date-part-group>
        <!-- Default: used by DATEPART and DATENAME -->
        <part name='year' value='year' />
        <part name='quarter' value='quarter' />
        <part name='month' value='month' />
        <part name='day' value='day' />
        <part name='dayofyear' value='dayofyear' />
        <part name='week' value='week' />
        <part name='weekday' value='weekday' />
        <part name='hour' value='hour' />
        <part name='minute' value='minute' />
        <part name='second' value='second' />
      </date-part-group>
      <date-part-group>
        <date-function name='DATEADD' />
        <part name='year' value='year' />
        <part name='quarter' value='quarter' />
        <part name='month' value='month' />
        <part name='day' value='day' />
        <part name='dayofyear' value='day' />
        <part name='week' value='week' />
        <part name='weekday' value='day' />
        <part name='hour' value='hour' />
        <part name='minute' value='minute' />
        <part name='second' value='second' />
      </date-part-group>
      <date-part-group>
        <date-function name='DATEDIFF' />
        <part name='year' value='year' />
        <part name='quarter' value='quarter' />
        <part name='month' value='month' />
        <part name='day' value='day' />
        <part name='dayofyear' value='day' />
        <part name='week' value='week' />
        <part name='weekday' value='day' />
        <part name='hour' value='hour' />
        <part name='minute' value='minute' />
        <part name='second' value='second' />
      </date-part-group>
      <date-part-group>
        <date-function name='DATETRUNC' />
        <part name='year' value='year' />
        <part name='quarter' value='quarter' />
        <part name='month' value='month' />
        <part name='day' value='day' />
        <part name='dayofyear' value='day' />
        <part name='week' value='week' />
        <part name='weekday' value='day' />
        <part name='hour' value='hour' />
        <part name='minute' value='minute' />
        <part name='second' value='second' />
      </date-part-group>
    </date-parts>
    <!--
      format-date-literal
      Specifies a formula for expressing a date literal, as well as an *ICU* date format.
      %1 is the format string and %2 is the formatted date literal.
    -->
    <format-date-literal formula="DATE '%1'" format='yyyy-MM-dd' />
    <format-datetime-literal formula="TIMESTAMP '%1'" format='yyyy-MM-dd HH:mm:ss' />
    <!--
      format-is-distinct
      Defines a strategy for determining whether two values are distinct.
      NoNullCheck: (lhs [!]= rhs)
      Keyword: (lhs IS [NOT ]DISTINCT FROM rhs)
      Operator: ([NOT (]lhs <=> rhs[)])
      [Default]Formula: ((lhs [!]= rhs) OR[AND] (lhs IS [NOT] NULL AND[OR] rhs IS [NOT] NULL))
    -->
    <format-is-distinct value='no_null_check' />
    <!--
      format-order-by
      [Default]DirectionOnly: ORDER BY col ASC/DESC
      Nulls: ORDER BY col ASC NULLS FIRST/DESC NULLS LAST
    -->
    <format-order-by value='Nulls' />
    <!--
      format-select
      Piece-by-piece formula for defining a SELECT statement
    -->
    <format-select>
      <part name='Top' value='SELECT * FROM (' />
      <part name='TopSampleRecords' value='WITH t1 AS (SELECT rowNumberInAllBlocks() AS row_id, * FROM (' />
      <part name='TopSamplePercent' value='SELECT modulo(rand64(), 100000000) AS extr_rnd_samp_pcnt_id, * FROM (' />
      <part name='Select' value='SELECT %1' />
      <part name='From' value='FROM %1' />
      <part name='Where' value='WHERE %1' />
      <part name='Group' value='GROUP BY %1' />
      <part name='Having' value='HAVING %1' />
      <part name='OrderBy' value='ORDER BY %1' />
      <part name='TopSamplePercent' value=') WHERE lessOrEquals(extr_rnd_samp_pcnt_id, %1 * 1000000)' />
      <part name='TopSampleRecords' value=')), t2 AS (SELECT * FROM (SELECT *, rowNumberInAllBlocks() AS row_id FROM (SELECT row_id AS row_num FROM t1 ORDER BY rand64())) WHERE less(row_num, %1)) SELECT * FROM t1 WHERE t1.row_id IN (SELECT row_id FROM t2)' />
      <part name='Top' value=') LIMIT %1' />
    </format-select>
      <!--
      format-simple-case
      [Default]Case
      BalancedIIF
    -->
    <format-simple-case value='balanced_iif' />
    <format-string-literal value='standard'/>
  </sql-format>
</dialect>
